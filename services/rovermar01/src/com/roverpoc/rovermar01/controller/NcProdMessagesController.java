/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.NcProdMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class NcProdMessages.
 * @see com.roverpoc.rovermar01.NcProdMessages
 */

@RestController(value = "Rovermar01.NcProdMessagesController")
@Api(value = "/rovermar01/NcProdMessages", description = "Exposes APIs to work with NcProdMessages resource.")
@RequestMapping("/rovermar01/NcProdMessages")
public class NcProdMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NcProdMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.NcProdMessagesService")
	private NcProdMessagesService ncProdMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of NcProdMessages instances matching the search criteria.")
	public Page<NcProdMessages> findNcProdMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering NcProdMessagess list");
		return ncProdMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of NcProdMessages instances.")
	public Page<NcProdMessages> getNcProdMessagess(Pageable pageable) {
		LOGGER.debug("Rendering NcProdMessagess list");
		return ncProdMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of NcProdMessages instances.")
	public Long countAllNcProdMessagess() {
		LOGGER.debug("counting NcProdMessagess");
		Long count = ncProdMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the NcProdMessages instance associated with the given id.")
    public NcProdMessages getNcProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting NcProdMessages with id: {}" , id);
        NcProdMessages instance = ncProdMessagesService.findById(id);
        LOGGER.debug("NcProdMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the NcProdMessages instance associated with the given id.")
    public boolean deleteNcProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NcProdMessages with id: {}" , id);
        NcProdMessages deleted = ncProdMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the NcProdMessages instance associated with the given id.")
    public NcProdMessages editNcProdMessages(@PathVariable("id") Integer id, @RequestBody NcProdMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing NcProdMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = ncProdMessagesService.update(instance);
        LOGGER.debug("NcProdMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new NcProdMessages instance.")
	public NcProdMessages createNcProdMessages(@RequestBody NcProdMessages instance) {
		LOGGER.debug("Create NcProdMessages with information: {}" , instance);
		instance = ncProdMessagesService.create(instance);
		LOGGER.debug("Created NcProdMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setNcProdMessagesService(NcProdMessagesService service) {
		this.ncProdMessagesService = service;
	}
}

