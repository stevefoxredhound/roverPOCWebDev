/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.DashboardCountsService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class DashboardCounts.
 * @see com.roverpoc.rovermar01.DashboardCounts
 */

@RestController(value = "Rovermar01.DashboardCountsController")
@Api(value = "/rovermar01/DashboardCounts", description = "Exposes APIs to work with DashboardCounts resource.")
@RequestMapping("/rovermar01/DashboardCounts")
public class DashboardCountsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(DashboardCountsController.class);

	@Autowired
	@Qualifier("rovermar01.DashboardCountsService")
	private DashboardCountsService dashboardCountsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of DashboardCounts instances matching the search criteria.")
	public Page<DashboardCounts> findDashboardCountss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering DashboardCountss list");
		return dashboardCountsService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of DashboardCounts instances.")
	public Page<DashboardCounts> getDashboardCountss(Pageable pageable) {
		LOGGER.debug("Rendering DashboardCountss list");
		return dashboardCountsService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of DashboardCounts instances.")
	public Long countAllDashboardCountss() {
		LOGGER.debug("counting DashboardCountss");
		Long count = dashboardCountsService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the DashboardCounts instance associated with the given id.")
    public DashboardCounts getDashboardCounts(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting DashboardCounts with id: {}" , id);
        DashboardCounts instance = dashboardCountsService.findById(id);
        LOGGER.debug("DashboardCounts details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the DashboardCounts instance associated with the given id.")
    public boolean deleteDashboardCounts(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting DashboardCounts with id: {}" , id);
        DashboardCounts deleted = dashboardCountsService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the DashboardCounts instance associated with the given id.")
    public DashboardCounts editDashboardCounts(@PathVariable("id") Integer id, @RequestBody DashboardCounts instance) throws EntityNotFoundException {
        LOGGER.debug("Editing DashboardCounts with id: {}" , instance.getId());
        instance.setId(id);
        instance = dashboardCountsService.update(instance);
        LOGGER.debug("DashboardCounts details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new DashboardCounts instance.")
	public DashboardCounts createDashboardCounts(@RequestBody DashboardCounts instance) {
		LOGGER.debug("Create DashboardCounts with information: {}" , instance);
		instance = dashboardCountsService.create(instance);
		LOGGER.debug("Created DashboardCounts with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setDashboardCountsService(DashboardCountsService service) {
		this.dashboardCountsService = service;
	}
}

