/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rovermar01.service.ResultsService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Results.
 * @see com.roverpoc.rovermar01.Results
 */
@RestController(value = "Rovermar01.ResultsController")
@RequestMapping("/rovermar01/Results")
@Api(description = "Exposes APIs to work with Results resource.", value = "ResultsController")
public class ResultsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ResultsController.class);

    @Autowired
    @Qualifier("rovermar01.ResultsService")
    private ResultsService resultsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Results instances matching the search criteria.")
    public Page<Results> findResultss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Resultss list");
        return resultsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Results instances.")
    public Page<Results> getResultss(Pageable pageable) {
        LOGGER.debug("Rendering Resultss list");
        return resultsService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setResultsService(ResultsService service) {
        this.resultsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Results instance.")
    public Results createResults(@RequestBody Results instance) {
        LOGGER.debug("Create Results with information: {}", instance);
        instance = resultsService.create(instance);
        LOGGER.debug("Created Results with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Results instances.")
    public Long countAllResultss() {
        LOGGER.debug("counting Resultss");
        Long count = resultsService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Results instance associated with the given id.")
    public Results getResults(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Results with id: {}", id);
        Results instance = resultsService.findById(id);
        LOGGER.debug("Results details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Results instance associated with the given id.")
    public Results editResults(@PathVariable(value = "id") Integer id, @RequestBody Results instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Results with id: {}", instance.getId());
        instance.setId(id);
        instance = resultsService.update(instance);
        LOGGER.debug("Results details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Results instance associated with the given id.")
    public boolean deleteResults(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Results with id: {}", id);
        Results deleted = resultsService.delete(id);
        return deleted != null;
    }
}
