/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.SysAUatMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class SysAUatMessages.
 * @see com.roverpoc.rovermar01.SysAUatMessages
 */

@RestController(value = "Rovermar01.SysAUatMessagesController")
@Api(value = "/rovermar01/SysAUatMessages", description = "Exposes APIs to work with SysAUatMessages resource.")
@RequestMapping("/rovermar01/SysAUatMessages")
public class SysAUatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysAUatMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.SysAUatMessagesService")
	private SysAUatMessagesService sysAUatMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of SysAUatMessages instances matching the search criteria.")
	public Page<SysAUatMessages> findSysAUatMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering SysAUatMessagess list");
		return sysAUatMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of SysAUatMessages instances.")
	public Page<SysAUatMessages> getSysAUatMessagess(Pageable pageable) {
		LOGGER.debug("Rendering SysAUatMessagess list");
		return sysAUatMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of SysAUatMessages instances.")
	public Long countAllSysAUatMessagess() {
		LOGGER.debug("counting SysAUatMessagess");
		Long count = sysAUatMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the SysAUatMessages instance associated with the given id.")
    public SysAUatMessages getSysAUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SysAUatMessages with id: {}" , id);
        SysAUatMessages instance = sysAUatMessagesService.findById(id);
        LOGGER.debug("SysAUatMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the SysAUatMessages instance associated with the given id.")
    public boolean deleteSysAUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SysAUatMessages with id: {}" , id);
        SysAUatMessages deleted = sysAUatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the SysAUatMessages instance associated with the given id.")
    public SysAUatMessages editSysAUatMessages(@PathVariable("id") Integer id, @RequestBody SysAUatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SysAUatMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = sysAUatMessagesService.update(instance);
        LOGGER.debug("SysAUatMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new SysAUatMessages instance.")
	public SysAUatMessages createSysAUatMessages(@RequestBody SysAUatMessages instance) {
		LOGGER.debug("Create SysAUatMessages with information: {}" , instance);
		instance = sysAUatMessagesService.create(instance);
		LOGGER.debug("Created SysAUatMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setSysAUatMessagesService(SysAUatMessagesService service) {
		this.sysAUatMessagesService = service;
	}
}

