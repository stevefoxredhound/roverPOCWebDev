/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.SysCProdMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class SysCProdMessages.
 * @see com.roverpoc.rovermar01.SysCProdMessages
 */

@RestController(value = "Rovermar01.SysCProdMessagesController")
@Api(value = "/rovermar01/SysCProdMessages", description = "Exposes APIs to work with SysCProdMessages resource.")
@RequestMapping("/rovermar01/SysCProdMessages")
public class SysCProdMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysCProdMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.SysCProdMessagesService")
	private SysCProdMessagesService sysCProdMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of SysCProdMessages instances matching the search criteria.")
	public Page<SysCProdMessages> findSysCProdMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering SysCProdMessagess list");
		return sysCProdMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of SysCProdMessages instances.")
	public Page<SysCProdMessages> getSysCProdMessagess(Pageable pageable) {
		LOGGER.debug("Rendering SysCProdMessagess list");
		return sysCProdMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of SysCProdMessages instances.")
	public Long countAllSysCProdMessagess() {
		LOGGER.debug("counting SysCProdMessagess");
		Long count = sysCProdMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the SysCProdMessages instance associated with the given id.")
    public SysCProdMessages getSysCProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SysCProdMessages with id: {}" , id);
        SysCProdMessages instance = sysCProdMessagesService.findById(id);
        LOGGER.debug("SysCProdMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the SysCProdMessages instance associated with the given id.")
    public boolean deleteSysCProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SysCProdMessages with id: {}" , id);
        SysCProdMessages deleted = sysCProdMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the SysCProdMessages instance associated with the given id.")
    public SysCProdMessages editSysCProdMessages(@PathVariable("id") Integer id, @RequestBody SysCProdMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SysCProdMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = sysCProdMessagesService.update(instance);
        LOGGER.debug("SysCProdMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new SysCProdMessages instance.")
	public SysCProdMessages createSysCProdMessages(@RequestBody SysCProdMessages instance) {
		LOGGER.debug("Create SysCProdMessages with information: {}" , instance);
		instance = sysCProdMessagesService.create(instance);
		LOGGER.debug("Created SysCProdMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setSysCProdMessagesService(SysCProdMessagesService service) {
		this.sysCProdMessagesService = service;
	}
}

