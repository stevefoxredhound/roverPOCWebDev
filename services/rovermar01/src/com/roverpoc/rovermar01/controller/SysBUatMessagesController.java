/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.SysBUatMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class SysBUatMessages.
 * @see com.roverpoc.rovermar01.SysBUatMessages
 */

@RestController(value = "Rovermar01.SysBUatMessagesController")
@Api(value = "/rovermar01/SysBUatMessages", description = "Exposes APIs to work with SysBUatMessages resource.")
@RequestMapping("/rovermar01/SysBUatMessages")
public class SysBUatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysBUatMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.SysBUatMessagesService")
	private SysBUatMessagesService sysBUatMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of SysBUatMessages instances matching the search criteria.")
	public Page<SysBUatMessages> findSysBUatMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering SysBUatMessagess list");
		return sysBUatMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of SysBUatMessages instances.")
	public Page<SysBUatMessages> getSysBUatMessagess(Pageable pageable) {
		LOGGER.debug("Rendering SysBUatMessagess list");
		return sysBUatMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of SysBUatMessages instances.")
	public Long countAllSysBUatMessagess() {
		LOGGER.debug("counting SysBUatMessagess");
		Long count = sysBUatMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the SysBUatMessages instance associated with the given id.")
    public SysBUatMessages getSysBUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SysBUatMessages with id: {}" , id);
        SysBUatMessages instance = sysBUatMessagesService.findById(id);
        LOGGER.debug("SysBUatMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the SysBUatMessages instance associated with the given id.")
    public boolean deleteSysBUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SysBUatMessages with id: {}" , id);
        SysBUatMessages deleted = sysBUatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the SysBUatMessages instance associated with the given id.")
    public SysBUatMessages editSysBUatMessages(@PathVariable("id") Integer id, @RequestBody SysBUatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SysBUatMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = sysBUatMessagesService.update(instance);
        LOGGER.debug("SysBUatMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new SysBUatMessages instance.")
	public SysBUatMessages createSysBUatMessages(@RequestBody SysBUatMessages instance) {
		LOGGER.debug("Create SysBUatMessages with information: {}" , instance);
		instance = sysBUatMessagesService.create(instance);
		LOGGER.debug("Created SysBUatMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setSysBUatMessagesService(SysBUatMessagesService service) {
		this.sysBUatMessagesService = service;
	}
}

