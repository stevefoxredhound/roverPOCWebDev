/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.UserLoginService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class UserLogin.
 * @see com.roverpoc.rovermar01.UserLogin
 */

@RestController(value = "Rovermar01.UserLoginController")
@Api(value = "/rovermar01/UserLogin", description = "Exposes APIs to work with UserLogin resource.")
@RequestMapping("/rovermar01/UserLogin")
public class UserLoginController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UserLoginController.class);

	@Autowired
	@Qualifier("rovermar01.UserLoginService")
	private UserLoginService userLoginService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of UserLogin instances matching the search criteria.")
	public Page<UserLogin> findUserLogins( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering UserLogins list");
		return userLoginService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of UserLogin instances.")
	public Page<UserLogin> getUserLogins(Pageable pageable) {
		LOGGER.debug("Rendering UserLogins list");
		return userLoginService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of UserLogin instances.")
	public Long countAllUserLogins() {
		LOGGER.debug("counting UserLogins");
		Long count = userLoginService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the UserLogin instance associated with the given id.")
    public UserLogin getUserLogin(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UserLogin with id: {}" , id);
        UserLogin instance = userLoginService.findById(id);
        LOGGER.debug("UserLogin details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the UserLogin instance associated with the given id.")
    public boolean deleteUserLogin(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UserLogin with id: {}" , id);
        UserLogin deleted = userLoginService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the UserLogin instance associated with the given id.")
    public UserLogin editUserLogin(@PathVariable("id") Integer id, @RequestBody UserLogin instance) throws EntityNotFoundException {
        LOGGER.debug("Editing UserLogin with id: {}" , instance.getId());
        instance.setId(id);
        instance = userLoginService.update(instance);
        LOGGER.debug("UserLogin details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new UserLogin instance.")
	public UserLogin createUserLogin(@RequestBody UserLogin instance) {
		LOGGER.debug("Create UserLogin with information: {}" , instance);
		instance = userLoginService.create(instance);
		LOGGER.debug("Created UserLogin with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setUserLoginService(UserLoginService service) {
		this.userLoginService = service;
	}
}

