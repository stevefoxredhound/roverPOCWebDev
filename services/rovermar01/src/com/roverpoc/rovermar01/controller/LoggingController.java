/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.LoggingService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class Logging.
 * @see com.roverpoc.rovermar01.Logging
 */

@RestController(value = "Rovermar01.LoggingController")
@Api(value = "/rovermar01/Logging", description = "Exposes APIs to work with Logging resource.")
@RequestMapping("/rovermar01/Logging")
public class LoggingController {

    private static final Logger LOGGER = LoggerFactory.getLogger(LoggingController.class);

	@Autowired
	@Qualifier("rovermar01.LoggingService")
	private LoggingService loggingService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of Logging instances matching the search criteria.")
	public Page<Logging> findLoggings( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering Loggings list");
		return loggingService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of Logging instances.")
	public Page<Logging> getLoggings(Pageable pageable) {
		LOGGER.debug("Rendering Loggings list");
		return loggingService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of Logging instances.")
	public Long countAllLoggings() {
		LOGGER.debug("counting Loggings");
		Long count = loggingService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the Logging instance associated with the given id.")
    public Logging getLogging(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Logging with id: {}" , id);
        Logging instance = loggingService.findById(id);
        LOGGER.debug("Logging details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the Logging instance associated with the given id.")
    public boolean deleteLogging(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Logging with id: {}" , id);
        Logging deleted = loggingService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the Logging instance associated with the given id.")
    public Logging editLogging(@PathVariable("id") Integer id, @RequestBody Logging instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Logging with id: {}" , instance.getId());
        instance.setId(id);
        instance = loggingService.update(instance);
        LOGGER.debug("Logging details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new Logging instance.")
	public Logging createLogging(@RequestBody Logging instance) {
		LOGGER.debug("Create Logging with information: {}" , instance);
		instance = loggingService.create(instance);
		LOGGER.debug("Created Logging with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setLoggingService(LoggingService service) {
		this.loggingService = service;
	}
}

