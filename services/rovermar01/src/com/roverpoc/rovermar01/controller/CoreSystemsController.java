/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rovermar01.service.CoreSystemsService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class CoreSystems.
 * @see com.roverpoc.rovermar01.CoreSystems
 */
@RestController(value = "Rovermar01.CoreSystemsController")
@RequestMapping("/rovermar01/CoreSystems")
@Api(description = "Exposes APIs to work with CoreSystems resource.", value = "CoreSystemsController")
public class CoreSystemsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CoreSystemsController.class);

    @Autowired
    @Qualifier("rovermar01.CoreSystemsService")
    private CoreSystemsService coreSystemsService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of CoreSystems instances matching the search criteria.")
    public Page<CoreSystems> findCoreSystemss(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering CoreSystemss list");
        return coreSystemsService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of CoreSystems instances.")
    public Page<CoreSystems> getCoreSystemss(Pageable pageable) {
        LOGGER.debug("Rendering CoreSystemss list");
        return coreSystemsService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCoreSystemsService(CoreSystemsService service) {
        this.coreSystemsService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new CoreSystems instance.")
    public CoreSystems createCoreSystems(@RequestBody CoreSystems instance) {
        LOGGER.debug("Create CoreSystems with information: {}", instance);
        instance = coreSystemsService.create(instance);
        LOGGER.debug("Created CoreSystems with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of CoreSystems instances.")
    public Long countAllCoreSystemss() {
        LOGGER.debug("counting CoreSystemss");
        Long count = coreSystemsService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the CoreSystems instance associated with the given id.")
    public CoreSystems getCoreSystems(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CoreSystems with id: {}", id);
        CoreSystems instance = coreSystemsService.findById(id);
        LOGGER.debug("CoreSystems details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the CoreSystems instance associated with the given id.")
    public CoreSystems editCoreSystems(@PathVariable(value = "id") Integer id, @RequestBody CoreSystems instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CoreSystems with id: {}", instance.getId());
        instance.setId(id);
        instance = coreSystemsService.update(instance);
        LOGGER.debug("CoreSystems details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the CoreSystems instance associated with the given id.")
    public boolean deleteCoreSystems(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CoreSystems with id: {}", id);
        CoreSystems deleted = coreSystemsService.delete(id);
        return deleted != null;
    }
}
