/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.ConnectGmiDataBothGmi256Service;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class ConnectGmiDataBothGmi256.
 * @see com.roverpoc.rovermar01.ConnectGmiDataBothGmi256
 */

@RestController(value = "Rovermar01.ConnectGmiDataBothGmi256Controller")
@Api(value = "/rovermar01/ConnectGmiDataBothGmi256", description = "Exposes APIs to work with ConnectGmiDataBothGmi256 resource.")
@RequestMapping("/rovermar01/ConnectGmiDataBothGmi256")
public class ConnectGmiDataBothGmi256Controller {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiDataBothGmi256Controller.class);

	@Autowired
	@Qualifier("rovermar01.ConnectGmiDataBothGmi256Service")
	private ConnectGmiDataBothGmi256Service connectGmiDataBothGmi256Service;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ConnectGmiDataBothGmi256 instances matching the search criteria.")
	public Page<ConnectGmiDataBothGmi256> findConnectGmiDataBothGmi256s( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ConnectGmiDataBothGmi256s list");
		return connectGmiDataBothGmi256Service.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ConnectGmiDataBothGmi256 instances.")
	public Page<ConnectGmiDataBothGmi256> getConnectGmiDataBothGmi256s(Pageable pageable) {
		LOGGER.debug("Rendering ConnectGmiDataBothGmi256s list");
		return connectGmiDataBothGmi256Service.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ConnectGmiDataBothGmi256 instances.")
	public Long countAllConnectGmiDataBothGmi256s() {
		LOGGER.debug("counting ConnectGmiDataBothGmi256s");
		Long count = connectGmiDataBothGmi256Service.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the ConnectGmiDataBothGmi256 instance associated with the given composite-id.")
	public ConnectGmiDataBothGmi256 getConnectGmiDataBothGmi256( @RequestParam("coreKey") String coreKey, @RequestParam("coreProcessDate") Date coreProcessDate, @RequestParam("price") String price)
	 throws EntityNotFoundException {
	    ConnectGmiDataBothGmi256Id temp = new ConnectGmiDataBothGmi256Id();
	    temp.setCoreKey(coreKey);
	    temp.setCoreProcessDate(coreProcessDate);
	    temp.setPrice(price);
		LOGGER.debug("Getting ConnectGmiDataBothGmi256 with id: {}" , temp);
		ConnectGmiDataBothGmi256 instance = connectGmiDataBothGmi256Service.findById(temp);
		LOGGER.debug("ConnectGmiDataBothGmi256 details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the ConnectGmiDataBothGmi256 instance associated with the given composite-id.")
	public boolean deleteConnectGmiDataBothGmi256( @RequestParam("coreKey") String coreKey, @RequestParam("coreProcessDate") Date coreProcessDate, @RequestParam("price") String price)throws EntityNotFoundException {
	    ConnectGmiDataBothGmi256Id temp = new ConnectGmiDataBothGmi256Id();
        temp.setCoreKey(coreKey);
        temp.setCoreProcessDate(coreProcessDate);
        temp.setPrice(price);
		LOGGER.debug("Deleting ConnectGmiDataBothGmi256 with id: {}" , temp);
		ConnectGmiDataBothGmi256 deleted = connectGmiDataBothGmi256Service.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the ConnectGmiDataBothGmi256 instance associated with the given composite-id.")
	public ConnectGmiDataBothGmi256 editConnectGmiDataBothGmi256( @RequestParam("coreKey") String coreKey, @RequestParam("coreProcessDate") Date coreProcessDate, @RequestParam("price") String price, @RequestBody ConnectGmiDataBothGmi256 instance) throws EntityNotFoundException {
	    ConnectGmiDataBothGmi256Id temp = new ConnectGmiDataBothGmi256Id();
         temp.setCoreKey(coreKey);
         temp.setCoreProcessDate(coreProcessDate);
         temp.setPrice(price);
        connectGmiDataBothGmi256Service.delete(temp);
        instance = connectGmiDataBothGmi256Service.create(instance);
	    LOGGER.debug("ConnectGmiDataBothGmi256 details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ConnectGmiDataBothGmi256 instance.")
	public ConnectGmiDataBothGmi256 createConnectGmiDataBothGmi256(@RequestBody ConnectGmiDataBothGmi256 instance) {
		LOGGER.debug("Create ConnectGmiDataBothGmi256 with information: {}" , instance);
		instance = connectGmiDataBothGmi256Service.create(instance);
		LOGGER.debug("Created ConnectGmiDataBothGmi256 with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setConnectGmiDataBothGmi256Service(ConnectGmiDataBothGmi256Service service) {
		this.connectGmiDataBothGmi256Service = service;
	}
}

