/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.ConnectGmiDataProdViewService;
import java.math.BigDecimal;
import java.util.Date;
import org.springframework.web.bind.annotation.RequestBody;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class ConnectGmiDataProdView.
 * @see com.roverpoc.rovermar01.ConnectGmiDataProdView
 */

@RestController(value = "Rovermar01.ConnectGmiDataProdViewController")
@Api(value = "/rovermar01/ConnectGmiDataProdView", description = "Exposes APIs to work with ConnectGmiDataProdView resource.")
@RequestMapping("/rovermar01/ConnectGmiDataProdView")
public class ConnectGmiDataProdViewController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiDataProdViewController.class);

	@Autowired
	@Qualifier("rovermar01.ConnectGmiDataProdViewService")
	private ConnectGmiDataProdViewService connectGmiDataProdViewService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ConnectGmiDataProdView instances matching the search criteria.")
	public Page<ConnectGmiDataProdView> findConnectGmiDataProdViews( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ConnectGmiDataProdViews list");
		return connectGmiDataProdViewService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ConnectGmiDataProdView instances.")
	public Page<ConnectGmiDataProdView> getConnectGmiDataProdViews(Pageable pageable) {
		LOGGER.debug("Rendering ConnectGmiDataProdViews list");
		return connectGmiDataProdViewService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ConnectGmiDataProdView instances.")
	public Long countAllConnectGmiDataProdViews() {
		LOGGER.debug("counting ConnectGmiDataProdViews");
		Long count = connectGmiDataProdViewService.countAll();
		return count;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the ConnectGmiDataProdView instance associated with the given composite-id.")
	public ConnectGmiDataProdView getConnectGmiDataProdView( @RequestParam("id") BigDecimal id, @RequestParam("dateTime") Date dateTime, @RequestParam("coreSystem") String coreSystem, @RequestParam("coreKey") String coreKey, @RequestParam("coreProcessDate") Date coreProcessDate, @RequestParam("tradeDate") String tradeDate, @RequestParam("member") String member, @RequestParam("trader") String trader, @RequestParam("qty") String qty, @RequestParam("price") String price, @RequestParam("product") String product, @RequestParam("expiry") String expiry, @RequestParam("currency") String currency, @RequestParam("buySell") String buySell, @RequestParam("productIsin") String productIsin)
	 throws EntityNotFoundException {
	    ConnectGmiDataProdViewId temp = new ConnectGmiDataProdViewId();
	    temp.setId(id);
	    temp.setDateTime(dateTime);
	    temp.setCoreSystem(coreSystem);
	    temp.setCoreKey(coreKey);
	    temp.setCoreProcessDate(coreProcessDate);
	    temp.setTradeDate(tradeDate);
	    temp.setMember(member);
	    temp.setTrader(trader);
	    temp.setQty(qty);
	    temp.setPrice(price);
	    temp.setProduct(product);
	    temp.setExpiry(expiry);
	    temp.setCurrency(currency);
	    temp.setBuySell(buySell);
	    temp.setProductIsin(productIsin);
		LOGGER.debug("Getting ConnectGmiDataProdView with id: {}" , temp);
		ConnectGmiDataProdView instance = connectGmiDataProdViewService.findById(temp);
		LOGGER.debug("ConnectGmiDataProdView details with id: {}" , instance);
		return instance;
	}
	@RequestMapping(value = "/composite-id", method = RequestMethod.DELETE)
	@ApiOperation(value = "Deletes the ConnectGmiDataProdView instance associated with the given composite-id.")
	public boolean deleteConnectGmiDataProdView( @RequestParam("id") BigDecimal id, @RequestParam("dateTime") Date dateTime, @RequestParam("coreSystem") String coreSystem, @RequestParam("coreKey") String coreKey, @RequestParam("coreProcessDate") Date coreProcessDate, @RequestParam("tradeDate") String tradeDate, @RequestParam("member") String member, @RequestParam("trader") String trader, @RequestParam("qty") String qty, @RequestParam("price") String price, @RequestParam("product") String product, @RequestParam("expiry") String expiry, @RequestParam("currency") String currency, @RequestParam("buySell") String buySell, @RequestParam("productIsin") String productIsin)throws EntityNotFoundException {
	    ConnectGmiDataProdViewId temp = new ConnectGmiDataProdViewId();
        temp.setId(id);
        temp.setDateTime(dateTime);
        temp.setCoreSystem(coreSystem);
        temp.setCoreKey(coreKey);
        temp.setCoreProcessDate(coreProcessDate);
        temp.setTradeDate(tradeDate);
        temp.setMember(member);
        temp.setTrader(trader);
        temp.setQty(qty);
        temp.setPrice(price);
        temp.setProduct(product);
        temp.setExpiry(expiry);
        temp.setCurrency(currency);
        temp.setBuySell(buySell);
        temp.setProductIsin(productIsin);
		LOGGER.debug("Deleting ConnectGmiDataProdView with id: {}" , temp);
		ConnectGmiDataProdView deleted = connectGmiDataProdViewService.delete(temp);
		return deleted != null;
	}

	@RequestMapping(value = "/composite-id", method = RequestMethod.PUT)
	@ApiOperation(value = "Updates the ConnectGmiDataProdView instance associated with the given composite-id.")
	public ConnectGmiDataProdView editConnectGmiDataProdView( @RequestParam("id") BigDecimal id, @RequestParam("dateTime") Date dateTime, @RequestParam("coreSystem") String coreSystem, @RequestParam("coreKey") String coreKey, @RequestParam("coreProcessDate") Date coreProcessDate, @RequestParam("tradeDate") String tradeDate, @RequestParam("member") String member, @RequestParam("trader") String trader, @RequestParam("qty") String qty, @RequestParam("price") String price, @RequestParam("product") String product, @RequestParam("expiry") String expiry, @RequestParam("currency") String currency, @RequestParam("buySell") String buySell, @RequestParam("productIsin") String productIsin, @RequestBody ConnectGmiDataProdView instance) throws EntityNotFoundException {
	    ConnectGmiDataProdViewId temp = new ConnectGmiDataProdViewId();
         temp.setId(id);
         temp.setDateTime(dateTime);
         temp.setCoreSystem(coreSystem);
         temp.setCoreKey(coreKey);
         temp.setCoreProcessDate(coreProcessDate);
         temp.setTradeDate(tradeDate);
         temp.setMember(member);
         temp.setTrader(trader);
         temp.setQty(qty);
         temp.setPrice(price);
         temp.setProduct(product);
         temp.setExpiry(expiry);
         temp.setCurrency(currency);
         temp.setBuySell(buySell);
         temp.setProductIsin(productIsin);
        connectGmiDataProdViewService.delete(temp);
        instance = connectGmiDataProdViewService.create(instance);
	    LOGGER.debug("ConnectGmiDataProdView details with id is updated: {}" , instance);
		return instance;
	}

	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ConnectGmiDataProdView instance.")
	public ConnectGmiDataProdView createConnectGmiDataProdView(@RequestBody ConnectGmiDataProdView instance) {
		LOGGER.debug("Create ConnectGmiDataProdView with information: {}" , instance);
		instance = connectGmiDataProdViewService.create(instance);
		LOGGER.debug("Created ConnectGmiDataProdView with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setConnectGmiDataProdViewService(ConnectGmiDataProdViewService service) {
		this.connectGmiDataProdViewService = service;
	}
}

