/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.TestGmiProdMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class TestGmiProdMessages.
 * @see com.roverpoc.rovermar01.TestGmiProdMessages
 */

@RestController(value = "Rovermar01.TestGmiProdMessagesController")
@Api(value = "/rovermar01/TestGmiProdMessages", description = "Exposes APIs to work with TestGmiProdMessages resource.")
@RequestMapping("/rovermar01/TestGmiProdMessages")
public class TestGmiProdMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestGmiProdMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.TestGmiProdMessagesService")
	private TestGmiProdMessagesService testGmiProdMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TestGmiProdMessages instances matching the search criteria.")
	public Page<TestGmiProdMessages> findTestGmiProdMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TestGmiProdMessagess list");
		return testGmiProdMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TestGmiProdMessages instances.")
	public Page<TestGmiProdMessages> getTestGmiProdMessagess(Pageable pageable) {
		LOGGER.debug("Rendering TestGmiProdMessagess list");
		return testGmiProdMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TestGmiProdMessages instances.")
	public Long countAllTestGmiProdMessagess() {
		LOGGER.debug("counting TestGmiProdMessagess");
		Long count = testGmiProdMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TestGmiProdMessages instance associated with the given id.")
    public TestGmiProdMessages getTestGmiProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestGmiProdMessages with id: {}" , id);
        TestGmiProdMessages instance = testGmiProdMessagesService.findById(id);
        LOGGER.debug("TestGmiProdMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TestGmiProdMessages instance associated with the given id.")
    public boolean deleteTestGmiProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestGmiProdMessages with id: {}" , id);
        TestGmiProdMessages deleted = testGmiProdMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TestGmiProdMessages instance associated with the given id.")
    public TestGmiProdMessages editTestGmiProdMessages(@PathVariable("id") Integer id, @RequestBody TestGmiProdMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TestGmiProdMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = testGmiProdMessagesService.update(instance);
        LOGGER.debug("TestGmiProdMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TestGmiProdMessages instance.")
	public TestGmiProdMessages createTestGmiProdMessages(@RequestBody TestGmiProdMessages instance) {
		LOGGER.debug("Create TestGmiProdMessages with information: {}" , instance);
		instance = testGmiProdMessagesService.create(instance);
		LOGGER.debug("Created TestGmiProdMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTestGmiProdMessagesService(TestGmiProdMessagesService service) {
		this.testGmiProdMessagesService = service;
	}
}

