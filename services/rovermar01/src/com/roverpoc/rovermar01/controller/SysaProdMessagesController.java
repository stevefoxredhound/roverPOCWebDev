/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller; 

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.SysaProdMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class SysaProdMessages.
 * @see com.roverpoc.rovermar01.SysaProdMessages
 */

@RestController(value = "Rovermar01.SysaProdMessagesController")
@Api(value = "/rovermar01/SysaProdMessages", description = "Exposes APIs to work with SysaProdMessages resource.")
@RequestMapping("/rovermar01/SysaProdMessages")
public class SysaProdMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(SysaProdMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.SysaProdMessagesService")
	private SysaProdMessagesService sysaProdMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of SysaProdMessages instances matching the search criteria.")
	public Page<SysaProdMessages> findSysaProdMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering SysaProdMessagess list");
		return sysaProdMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of SysaProdMessages instances.")
	public Page<SysaProdMessages> getSysaProdMessagess(Pageable pageable) {
		LOGGER.debug("Rendering SysaProdMessagess list");
		return sysaProdMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of SysaProdMessages instances.")
	public Long countAllSysaProdMessagess() {
		LOGGER.debug("counting SysaProdMessagess");
		Long count = sysaProdMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the SysaProdMessages instance associated with the given id.")
    public SysaProdMessages getSysaProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting SysaProdMessages with id: {}" , id);
        SysaProdMessages instance = sysaProdMessagesService.findById(id);
        LOGGER.debug("SysaProdMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the SysaProdMessages instance associated with the given id.")
    public boolean deleteSysaProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting SysaProdMessages with id: {}" , id);
        SysaProdMessages deleted = sysaProdMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the SysaProdMessages instance associated with the given id.")
    public SysaProdMessages editSysaProdMessages(@PathVariable("id") Integer id, @RequestBody SysaProdMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing SysaProdMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = sysaProdMessagesService.update(instance);
        LOGGER.debug("SysaProdMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new SysaProdMessages instance.")
	public SysaProdMessages createSysaProdMessages(@RequestBody SysaProdMessages instance) {
		LOGGER.debug("Create SysaProdMessages with information: {}" , instance);
		instance = sysaProdMessagesService.create(instance);
		LOGGER.debug("Created SysaProdMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setSysaProdMessagesService(SysaProdMessagesService service) {
		this.sysaProdMessagesService = service;
	}
}

