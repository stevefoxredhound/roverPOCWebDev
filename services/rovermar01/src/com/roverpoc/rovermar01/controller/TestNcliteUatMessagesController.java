/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.TestNcliteUatMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class TestNcliteUatMessages.
 * @see com.roverpoc.rovermar01.TestNcliteUatMessages
 */

@RestController(value = "Rovermar01.TestNcliteUatMessagesController")
@Api(value = "/rovermar01/TestNcliteUatMessages", description = "Exposes APIs to work with TestNcliteUatMessages resource.")
@RequestMapping("/rovermar01/TestNcliteUatMessages")
public class TestNcliteUatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestNcliteUatMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.TestNcliteUatMessagesService")
	private TestNcliteUatMessagesService testNcliteUatMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TestNcliteUatMessages instances matching the search criteria.")
	public Page<TestNcliteUatMessages> findTestNcliteUatMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TestNcliteUatMessagess list");
		return testNcliteUatMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TestNcliteUatMessages instances.")
	public Page<TestNcliteUatMessages> getTestNcliteUatMessagess(Pageable pageable) {
		LOGGER.debug("Rendering TestNcliteUatMessagess list");
		return testNcliteUatMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TestNcliteUatMessages instances.")
	public Long countAllTestNcliteUatMessagess() {
		LOGGER.debug("counting TestNcliteUatMessagess");
		Long count = testNcliteUatMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TestNcliteUatMessages instance associated with the given id.")
    public TestNcliteUatMessages getTestNcliteUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestNcliteUatMessages with id: {}" , id);
        TestNcliteUatMessages instance = testNcliteUatMessagesService.findById(id);
        LOGGER.debug("TestNcliteUatMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TestNcliteUatMessages instance associated with the given id.")
    public boolean deleteTestNcliteUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestNcliteUatMessages with id: {}" , id);
        TestNcliteUatMessages deleted = testNcliteUatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TestNcliteUatMessages instance associated with the given id.")
    public TestNcliteUatMessages editTestNcliteUatMessages(@PathVariable("id") Integer id, @RequestBody TestNcliteUatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TestNcliteUatMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = testNcliteUatMessagesService.update(instance);
        LOGGER.debug("TestNcliteUatMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TestNcliteUatMessages instance.")
	public TestNcliteUatMessages createTestNcliteUatMessages(@RequestBody TestNcliteUatMessages instance) {
		LOGGER.debug("Create TestNcliteUatMessages with information: {}" , instance);
		instance = testNcliteUatMessagesService.create(instance);
		LOGGER.debug("Created TestNcliteUatMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTestNcliteUatMessagesService(TestNcliteUatMessagesService service) {
		this.testNcliteUatMessagesService = service;
	}
}

