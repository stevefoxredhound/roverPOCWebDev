/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.ConnectGmiVennUatUniqueService;
import java.math.BigDecimal;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class ConnectGmiVennUatUnique.
 * @see com.roverpoc.rovermar01.ConnectGmiVennUatUnique
 */

@RestController(value = "Rovermar01.ConnectGmiVennUatUniqueController")
@Api(value = "/rovermar01/ConnectGmiVennUatUnique", description = "Exposes APIs to work with ConnectGmiVennUatUnique resource.")
@RequestMapping("/rovermar01/ConnectGmiVennUatUnique")
public class ConnectGmiVennUatUniqueController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennUatUniqueController.class);

	@Autowired
	@Qualifier("rovermar01.ConnectGmiVennUatUniqueService")
	private ConnectGmiVennUatUniqueService connectGmiVennUatUniqueService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ConnectGmiVennUatUnique instances matching the search criteria.")
	public Page<ConnectGmiVennUatUnique> findConnectGmiVennUatUniques( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ConnectGmiVennUatUniques list");
		return connectGmiVennUatUniqueService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ConnectGmiVennUatUnique instances.")
	public Page<ConnectGmiVennUatUnique> getConnectGmiVennUatUniques(Pageable pageable) {
		LOGGER.debug("Rendering ConnectGmiVennUatUniques list");
		return connectGmiVennUatUniqueService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ConnectGmiVennUatUnique instances.")
	public Long countAllConnectGmiVennUatUniques() {
		LOGGER.debug("counting ConnectGmiVennUatUniques");
		Long count = connectGmiVennUatUniqueService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ConnectGmiVennUatUnique instance associated with the given id.")
    public ConnectGmiVennUatUnique getConnectGmiVennUatUnique(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting ConnectGmiVennUatUnique with id: {}" , id);
        ConnectGmiVennUatUnique instance = connectGmiVennUatUniqueService.findById(id);
        LOGGER.debug("ConnectGmiVennUatUnique details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ConnectGmiVennUatUnique instance associated with the given id.")
    public boolean deleteConnectGmiVennUatUnique(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ConnectGmiVennUatUnique with id: {}" , id);
        ConnectGmiVennUatUnique deleted = connectGmiVennUatUniqueService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ConnectGmiVennUatUnique instance associated with the given id.")
    public ConnectGmiVennUatUnique editConnectGmiVennUatUnique(@PathVariable("id") BigDecimal id, @RequestBody ConnectGmiVennUatUnique instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ConnectGmiVennUatUnique with id: {}" , instance.getCount_distinct_coreKey__());
        instance.setCount_distinct_coreKey__(id);
        instance = connectGmiVennUatUniqueService.update(instance);
        LOGGER.debug("ConnectGmiVennUatUnique details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ConnectGmiVennUatUnique instance.")
	public ConnectGmiVennUatUnique createConnectGmiVennUatUnique(@RequestBody ConnectGmiVennUatUnique instance) {
		LOGGER.debug("Create ConnectGmiVennUatUnique with information: {}" , instance);
		instance = connectGmiVennUatUniqueService.create(instance);
		LOGGER.debug("Created ConnectGmiVennUatUnique with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setConnectGmiVennUatUniqueService(ConnectGmiVennUatUniqueService service) {
		this.connectGmiVennUatUniqueService = service;
	}
}

