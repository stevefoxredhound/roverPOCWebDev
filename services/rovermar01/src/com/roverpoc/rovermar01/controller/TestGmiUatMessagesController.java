/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.TestGmiUatMessagesService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class TestGmiUatMessages.
 * @see com.roverpoc.rovermar01.TestGmiUatMessages
 */

@RestController(value = "Rovermar01.TestGmiUatMessagesController")
@Api(value = "/rovermar01/TestGmiUatMessages", description = "Exposes APIs to work with TestGmiUatMessages resource.")
@RequestMapping("/rovermar01/TestGmiUatMessages")
public class TestGmiUatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(TestGmiUatMessagesController.class);

	@Autowired
	@Qualifier("rovermar01.TestGmiUatMessagesService")
	private TestGmiUatMessagesService testGmiUatMessagesService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of TestGmiUatMessages instances matching the search criteria.")
	public Page<TestGmiUatMessages> findTestGmiUatMessagess( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering TestGmiUatMessagess list");
		return testGmiUatMessagesService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of TestGmiUatMessages instances.")
	public Page<TestGmiUatMessages> getTestGmiUatMessagess(Pageable pageable) {
		LOGGER.debug("Rendering TestGmiUatMessagess list");
		return testGmiUatMessagesService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of TestGmiUatMessages instances.")
	public Long countAllTestGmiUatMessagess() {
		LOGGER.debug("counting TestGmiUatMessagess");
		Long count = testGmiUatMessagesService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the TestGmiUatMessages instance associated with the given id.")
    public TestGmiUatMessages getTestGmiUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting TestGmiUatMessages with id: {}" , id);
        TestGmiUatMessages instance = testGmiUatMessagesService.findById(id);
        LOGGER.debug("TestGmiUatMessages details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the TestGmiUatMessages instance associated with the given id.")
    public boolean deleteTestGmiUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting TestGmiUatMessages with id: {}" , id);
        TestGmiUatMessages deleted = testGmiUatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the TestGmiUatMessages instance associated with the given id.")
    public TestGmiUatMessages editTestGmiUatMessages(@PathVariable("id") Integer id, @RequestBody TestGmiUatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing TestGmiUatMessages with id: {}" , instance.getId());
        instance.setId(id);
        instance = testGmiUatMessagesService.update(instance);
        LOGGER.debug("TestGmiUatMessages details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new TestGmiUatMessages instance.")
	public TestGmiUatMessages createTestGmiUatMessages(@RequestBody TestGmiUatMessages instance) {
		LOGGER.debug("Create TestGmiUatMessages with information: {}" , instance);
		instance = testGmiUatMessagesService.create(instance);
		LOGGER.debug("Created TestGmiUatMessages with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setTestGmiUatMessagesService(TestGmiUatMessagesService service) {
		this.testGmiUatMessagesService = service;
	}
}

