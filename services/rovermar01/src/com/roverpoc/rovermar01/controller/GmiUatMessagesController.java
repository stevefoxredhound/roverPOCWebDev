/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rovermar01.service.GmiUatMessagesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class GmiUatMessages.
 * @see com.roverpoc.rovermar01.GmiUatMessages
 */
@RestController(value = "Rovermar01.GmiUatMessagesController")
@RequestMapping("/rovermar01/GmiUatMessages")
@Api(description = "Exposes APIs to work with GmiUatMessages resource.", value = "GmiUatMessagesController")
public class GmiUatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(GmiUatMessagesController.class);

    @Autowired
    @Qualifier("rovermar01.GmiUatMessagesService")
    private GmiUatMessagesService gmiUatMessagesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of GmiUatMessages instances matching the search criteria.")
    public Page<GmiUatMessages> findGmiUatMessagess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering GmiUatMessagess list");
        return gmiUatMessagesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of GmiUatMessages instances.")
    public Page<GmiUatMessages> getGmiUatMessagess(Pageable pageable) {
        LOGGER.debug("Rendering GmiUatMessagess list");
        return gmiUatMessagesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the GmiUatMessages instance associated with the given id.")
    public GmiUatMessages getGmiUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting GmiUatMessages with id: {}", id);
        GmiUatMessages instance = gmiUatMessagesService.findById(id);
        LOGGER.debug("GmiUatMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the GmiUatMessages instance associated with the given id.")
    public boolean deleteGmiUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting GmiUatMessages with id: {}", id);
        GmiUatMessages deleted = gmiUatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the GmiUatMessages instance associated with the given id.")
    public GmiUatMessages editGmiUatMessages(@PathVariable("id") Integer id, @RequestBody GmiUatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing GmiUatMessages with id: {}", instance.getId());
        instance.setId(id);
        instance = gmiUatMessagesService.update(instance);
        LOGGER.debug("GmiUatMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new GmiUatMessages instance.")
    public GmiUatMessages createGmiUatMessages(@RequestBody GmiUatMessages instance) {
        LOGGER.debug("Create GmiUatMessages with information: {}", instance);
        instance = gmiUatMessagesService.create(instance);
        LOGGER.debug("Created GmiUatMessages with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setGmiUatMessagesService(GmiUatMessagesService service) {
        this.gmiUatMessagesService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of GmiUatMessages instances.")
    public Long countAllGmiUatMessagess() {
        LOGGER.debug("counting GmiUatMessagess");
        Long count = gmiUatMessagesService.countAll();
        return count;
    }
}
