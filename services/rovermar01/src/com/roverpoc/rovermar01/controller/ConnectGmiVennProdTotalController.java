/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.ConnectGmiVennProdTotalService;
import java.math.BigDecimal;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class ConnectGmiVennProdTotal.
 * @see com.roverpoc.rovermar01.ConnectGmiVennProdTotal
 */

@RestController(value = "Rovermar01.ConnectGmiVennProdTotalController")
@Api(value = "/rovermar01/ConnectGmiVennProdTotal", description = "Exposes APIs to work with ConnectGmiVennProdTotal resource.")
@RequestMapping("/rovermar01/ConnectGmiVennProdTotal")
public class ConnectGmiVennProdTotalController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennProdTotalController.class);

	@Autowired
	@Qualifier("rovermar01.ConnectGmiVennProdTotalService")
	private ConnectGmiVennProdTotalService connectGmiVennProdTotalService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of ConnectGmiVennProdTotal instances matching the search criteria.")
	public Page<ConnectGmiVennProdTotal> findConnectGmiVennProdTotals( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering ConnectGmiVennProdTotals list");
		return connectGmiVennProdTotalService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of ConnectGmiVennProdTotal instances.")
	public Page<ConnectGmiVennProdTotal> getConnectGmiVennProdTotals(Pageable pageable) {
		LOGGER.debug("Rendering ConnectGmiVennProdTotals list");
		return connectGmiVennProdTotalService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of ConnectGmiVennProdTotal instances.")
	public Long countAllConnectGmiVennProdTotals() {
		LOGGER.debug("counting ConnectGmiVennProdTotals");
		Long count = connectGmiVennProdTotalService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ConnectGmiVennProdTotal instance associated with the given id.")
    public ConnectGmiVennProdTotal getConnectGmiVennProdTotal(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Getting ConnectGmiVennProdTotal with id: {}" , id);
        ConnectGmiVennProdTotal instance = connectGmiVennProdTotalService.findById(id);
        LOGGER.debug("ConnectGmiVennProdTotal details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ConnectGmiVennProdTotal instance associated with the given id.")
    public boolean deleteConnectGmiVennProdTotal(@PathVariable("id") BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ConnectGmiVennProdTotal with id: {}" , id);
        ConnectGmiVennProdTotal deleted = connectGmiVennProdTotalService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ConnectGmiVennProdTotal instance associated with the given id.")
    public ConnectGmiVennProdTotal editConnectGmiVennProdTotal(@PathVariable("id") BigDecimal id, @RequestBody ConnectGmiVennProdTotal instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ConnectGmiVennProdTotal with id: {}" , instance.getCount___());
        instance.setCount___(id);
        instance = connectGmiVennProdTotalService.update(instance);
        LOGGER.debug("ConnectGmiVennProdTotal details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new ConnectGmiVennProdTotal instance.")
	public ConnectGmiVennProdTotal createConnectGmiVennProdTotal(@RequestBody ConnectGmiVennProdTotal instance) {
		LOGGER.debug("Create ConnectGmiVennProdTotal with information: {}" , instance);
		instance = connectGmiVennProdTotalService.create(instance);
		LOGGER.debug("Created ConnectGmiVennProdTotal with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setConnectGmiVennProdTotalService(ConnectGmiVennProdTotalService service) {
		this.connectGmiVennProdTotalService = service;
	}
}

