/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import com.roverpoc.rovermar01.service.CollatedGroupsService;


import java.io.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;

import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;


/**
 * Controller object for domain model class CollatedGroups.
 * @see com.roverpoc.rovermar01.CollatedGroups
 */

@RestController(value = "Rovermar01.CollatedGroupsController")
@Api(value = "/rovermar01/CollatedGroups", description = "Exposes APIs to work with CollatedGroups resource.")
@RequestMapping("/rovermar01/CollatedGroups")
public class CollatedGroupsController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CollatedGroupsController.class);

	@Autowired
	@Qualifier("rovermar01.CollatedGroupsService")
	private CollatedGroupsService collatedGroupsService;


	@RequestMapping(value = "/search", method = RequestMethod.POST)
	@ApiOperation(value = "Returns the list of CollatedGroups instances matching the search criteria.")
	public Page<CollatedGroups> findCollatedGroupss( Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
		LOGGER.debug("Rendering CollatedGroupss list");
		return collatedGroupsService.findAll(queryFilters, pageable);
	}

	@RequestMapping(value = "/", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the list of CollatedGroups instances.")
	public Page<CollatedGroups> getCollatedGroupss(Pageable pageable) {
		LOGGER.debug("Rendering CollatedGroupss list");
		return collatedGroupsService.findAll(pageable);
	}

	@RequestMapping(value = "/count", method = RequestMethod.GET)
	@ApiOperation(value = "Returns the total count of CollatedGroups instances.")
	public Long countAllCollatedGroupss() {
		LOGGER.debug("counting CollatedGroupss");
		Long count = collatedGroupsService.countAll();
		return count;
	}


    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the CollatedGroups instance associated with the given id.")
    public CollatedGroups getCollatedGroups(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting CollatedGroups with id: {}" , id);
        CollatedGroups instance = collatedGroupsService.findById(id);
        LOGGER.debug("CollatedGroups details with id: {}" , instance);
        return instance;
    }
    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the CollatedGroups instance associated with the given id.")
    public boolean deleteCollatedGroups(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting CollatedGroups with id: {}" , id);
        CollatedGroups deleted = collatedGroupsService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the CollatedGroups instance associated with the given id.")
    public CollatedGroups editCollatedGroups(@PathVariable("id") Integer id, @RequestBody CollatedGroups instance) throws EntityNotFoundException {
        LOGGER.debug("Editing CollatedGroups with id: {}" , instance.getId());
        instance.setId(id);
        instance = collatedGroupsService.update(instance);
        LOGGER.debug("CollatedGroups details with id: {}" , instance);
        return instance;
    }




	@RequestMapping(value = "/", method = RequestMethod.POST)
	@ApiOperation(value = "Creates a new CollatedGroups instance.")
	public CollatedGroups createCollatedGroups(@RequestBody CollatedGroups instance) {
		LOGGER.debug("Create CollatedGroups with information: {}" , instance);
		instance = collatedGroupsService.create(instance);
		LOGGER.debug("Created CollatedGroups with information: {}" , instance);
	    return instance;
	}

	/**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
	protected void setCollatedGroupsService(CollatedGroupsService service) {
		this.collatedGroupsService = service;
	}
}

