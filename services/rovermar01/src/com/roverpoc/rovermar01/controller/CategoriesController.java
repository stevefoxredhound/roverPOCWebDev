/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rovermar01.service.CategoriesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wavemaker.runtime.file.model.DownloadResponse;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rovermar01.*;
import com.roverpoc.rovermar01.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class Categories.
 * @see com.roverpoc.rovermar01.Categories
 */
@RestController(value = "Rovermar01.CategoriesController")
@RequestMapping("/rovermar01/Categories")
@Api(description = "Exposes APIs to work with Categories resource.", value = "CategoriesController")
public class CategoriesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(CategoriesController.class);

    @Autowired
    @Qualifier("rovermar01.CategoriesService")
    private CategoriesService categoriesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of Categories instances matching the search criteria.")
    public Page<Categories> findCategoriess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering Categoriess list");
        return categoriesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of Categories instances.")
    public Page<Categories> getCategoriess(Pageable pageable) {
        LOGGER.debug("Rendering Categoriess list");
        return categoriesService.findAll(pageable);
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setCategoriesService(CategoriesService service) {
        this.categoriesService = service;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Creates a new Categories instance.")
    public Categories createCategories(@RequestBody Categories instance) {
        LOGGER.debug("Create Categories with information: {}", instance);
        instance = categoriesService.create(instance);
        LOGGER.debug("Created Categories with information: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of Categories instances.")
    public Long countAllCategoriess() {
        LOGGER.debug("counting Categoriess");
        Long count = categoriesService.countAll();
        return count;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the Categories instance associated with the given id.")
    public Categories getCategories(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting Categories with id: {}", id);
        Categories instance = categoriesService.findById(id);
        LOGGER.debug("Categories details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Updates the Categories instance associated with the given id.")
    public Categories editCategories(@PathVariable(value = "id") Integer id, @RequestBody Categories instance) throws EntityNotFoundException {
        LOGGER.debug("Editing Categories with id: {}", instance.getId());
        instance.setId(id);
        instance = categoriesService.update(instance);
        LOGGER.debug("Categories details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Deletes the Categories instance associated with the given id.")
    public boolean deleteCategories(@PathVariable(value = "id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting Categories with id: {}", id);
        Categories deleted = categoriesService.delete(id);
        return deleted != null;
    }
}
