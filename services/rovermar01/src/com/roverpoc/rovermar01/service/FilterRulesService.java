/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class FilterRules.
 * @see com.roverpoc.rovermar01.FilterRules
 */

public interface FilterRulesService {
   /**
	 * Creates a new filterrules.
	 * 
	 * @param created
	 *            The information of the created filterrules.
	 * @return The created filterrules.
	 */
	public FilterRules create(FilterRules created);

	/**
	 * Deletes a filterrules.
	 * 
	 * @param filterrulesId
	 *            The id of the deleted filterrules.
	 * @return The deleted filterrules.
	 * @throws EntityNotFoundException
	 *             if no filterrules is found with the given id.
	 */
	public FilterRules delete(Integer filterrulesId) throws EntityNotFoundException;

	/**
	 * Finds all filterruless.
	 * 
	 * @return A list of filterruless.
	 */
	public Page<FilterRules> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<FilterRules> findAll(Pageable pageable);
	
	/**
	 * Finds filterrules by id.
	 * 
	 * @param id
	 *            The id of the wanted filterrules.
	 * @return The found filterrules. If no filterrules is found, this method returns
	 *         null.
	 */
	public FilterRules findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a filterrules.
	 * 
	 * @param updated
	 *            The information of the updated filterrules.
	 * @return The updated filterrules.
	 * @throws EntityNotFoundException
	 *             if no filterrules is found with given id.
	 */
	public FilterRules update(FilterRules updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the filterruless in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the filterrules.
	 */

	public long countAll();


    public Page<FilterRules> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

