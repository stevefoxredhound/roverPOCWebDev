/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class SysaUatMessages.
 * @see com.roverpoc.rovermar01.SysaUatMessages
 */
@Service("rovermar01.SysaUatMessagesService")
public class SysaUatMessagesServiceImpl implements SysaUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SysaUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.SysaUatMessagesDao")
    private WMGenericDao<SysaUatMessages, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<SysaUatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<SysaUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public SysaUatMessages create(SysaUatMessages sysauatmessages) {
        LOGGER.debug("Creating a new sysauatmessages with information: {}" , sysauatmessages);
        return this.wmGenericDao.create(sysauatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysaUatMessages delete(Integer sysauatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting sysauatmessages with id: {}" , sysauatmessagesId);
        SysaUatMessages deleted = this.wmGenericDao.findById(sysauatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No sysauatmessages found with id: {}" , sysauatmessagesId);
            throw new EntityNotFoundException(String.valueOf(sysauatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysaUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all sysauatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysaUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all sysauatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public SysaUatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding sysauatmessages by id: {}" , id);
        SysaUatMessages sysauatmessages=this.wmGenericDao.findById(id);
        if(sysauatmessages==null){
            LOGGER.debug("No sysauatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return sysauatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysaUatMessages update(SysaUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating sysauatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


