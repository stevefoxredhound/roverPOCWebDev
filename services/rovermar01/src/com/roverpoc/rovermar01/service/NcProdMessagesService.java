/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class NcProdMessages.
 * @see com.roverpoc.rovermar01.NcProdMessages
 */

public interface NcProdMessagesService {
   /**
	 * Creates a new ncprodmessages.
	 * 
	 * @param created
	 *            The information of the created ncprodmessages.
	 * @return The created ncprodmessages.
	 */
	public NcProdMessages create(NcProdMessages created);

	/**
	 * Deletes a ncprodmessages.
	 * 
	 * @param ncprodmessagesId
	 *            The id of the deleted ncprodmessages.
	 * @return The deleted ncprodmessages.
	 * @throws EntityNotFoundException
	 *             if no ncprodmessages is found with the given id.
	 */
	public NcProdMessages delete(Integer ncprodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all ncprodmessagess.
	 * 
	 * @return A list of ncprodmessagess.
	 */
	public Page<NcProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NcProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds ncprodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted ncprodmessages.
	 * @return The found ncprodmessages. If no ncprodmessages is found, this method returns
	 *         null.
	 */
	public NcProdMessages findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a ncprodmessages.
	 * 
	 * @param updated
	 *            The information of the updated ncprodmessages.
	 * @return The updated ncprodmessages.
	 * @throws EntityNotFoundException
	 *             if no ncprodmessages is found with given id.
	 */
	public NcProdMessages update(NcProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the ncprodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the ncprodmessages.
	 */

	public long countAll();


    public Page<NcProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

