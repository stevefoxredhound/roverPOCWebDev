/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class ConnectGmiVennBoth.
 * @see com.roverpoc.rovermar01.ConnectGmiVennBoth
 */
@Service("rovermar01.ConnectGmiVennBothService")
public class ConnectGmiVennBothServiceImpl implements ConnectGmiVennBothService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennBothServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.ConnectGmiVennBothDao")
    private WMGenericDao<ConnectGmiVennBoth, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectGmiVennBoth, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<ConnectGmiVennBoth> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennBoth create(ConnectGmiVennBoth connectgmivennboth) {
        LOGGER.debug("Creating a new connectgmivennboth with information: {}" , connectgmivennboth);
        return this.wmGenericDao.create(connectgmivennboth);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennBoth delete(BigDecimal connectgmivennbothId) throws EntityNotFoundException {
        LOGGER.debug("Deleting connectgmivennboth with id: {}" , connectgmivennbothId);
        ConnectGmiVennBoth deleted = this.wmGenericDao.findById(connectgmivennbothId);
        if (deleted == null) {
            LOGGER.debug("No connectgmivennboth found with id: {}" , connectgmivennbothId);
            throw new EntityNotFoundException(String.valueOf(connectgmivennbothId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennBoth> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennboths");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennBoth> findAll(Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennboths");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennBoth findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding connectgmivennboth by id: {}" , id);
        ConnectGmiVennBoth connectgmivennboth=this.wmGenericDao.findById(id);
        if(connectgmivennboth==null){
            LOGGER.debug("No connectgmivennboth found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return connectgmivennboth;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennBoth update(ConnectGmiVennBoth updated) throws EntityNotFoundException {
        LOGGER.debug("Updating connectgmivennboth with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getCount_distinct_coreKey__();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


