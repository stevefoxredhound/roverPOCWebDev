/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class ConnectGmiVennUatTotal.
 * @see com.roverpoc.rovermar01.ConnectGmiVennUatTotal
 */
@Service("rovermar01.ConnectGmiVennUatTotalService")
public class ConnectGmiVennUatTotalServiceImpl implements ConnectGmiVennUatTotalService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennUatTotalServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.ConnectGmiVennUatTotalDao")
    private WMGenericDao<ConnectGmiVennUatTotal, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectGmiVennUatTotal, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<ConnectGmiVennUatTotal> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatTotal create(ConnectGmiVennUatTotal connectgmivennuattotal) {
        LOGGER.debug("Creating a new connectgmivennuattotal with information: {}" , connectgmivennuattotal);
        return this.wmGenericDao.create(connectgmivennuattotal);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatTotal delete(BigDecimal connectgmivennuattotalId) throws EntityNotFoundException {
        LOGGER.debug("Deleting connectgmivennuattotal with id: {}" , connectgmivennuattotalId);
        ConnectGmiVennUatTotal deleted = this.wmGenericDao.findById(connectgmivennuattotalId);
        if (deleted == null) {
            LOGGER.debug("No connectgmivennuattotal found with id: {}" , connectgmivennuattotalId);
            throw new EntityNotFoundException(String.valueOf(connectgmivennuattotalId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennUatTotal> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennuattotals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennUatTotal> findAll(Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennuattotals");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatTotal findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding connectgmivennuattotal by id: {}" , id);
        ConnectGmiVennUatTotal connectgmivennuattotal=this.wmGenericDao.findById(id);
        if(connectgmivennuattotal==null){
            LOGGER.debug("No connectgmivennuattotal found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return connectgmivennuattotal;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatTotal update(ConnectGmiVennUatTotal updated) throws EntityNotFoundException {
        LOGGER.debug("Updating connectgmivennuattotal with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getCount___();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


