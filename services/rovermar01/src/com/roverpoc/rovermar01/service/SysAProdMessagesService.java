/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class SysAProdMessages.
 * @see com.roverpoc.rovermar01.SysAProdMessages
 */

public interface SysAProdMessagesService {
   /**
	 * Creates a new sysaprodmessages.
	 * 
	 * @param created
	 *            The information of the created sysaprodmessages.
	 * @return The created sysaprodmessages.
	 */
	public SysAProdMessages create(SysAProdMessages created);

	/**
	 * Deletes a sysaprodmessages.
	 * 
	 * @param sysaprodmessagesId
	 *            The id of the deleted sysaprodmessages.
	 * @return The deleted sysaprodmessages.
	 * @throws EntityNotFoundException
	 *             if no sysaprodmessages is found with the given id.
	 */
	public SysAProdMessages delete(Integer sysaprodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all sysaprodmessagess.
	 * 
	 * @return A list of sysaprodmessagess.
	 */
	public Page<SysAProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SysAProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds sysaprodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted sysaprodmessages.
	 * @return The found sysaprodmessages. If no sysaprodmessages is found, this method returns
	 *         null.
	 */
	public SysAProdMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a sysaprodmessages.
	 * 
	 * @param updated
	 *            The information of the updated sysaprodmessages.
	 * @return The updated sysaprodmessages.
	 * @throws EntityNotFoundException
	 *             if no sysaprodmessages is found with given id.
	 */
	public SysAProdMessages update(SysAProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the sysaprodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the sysaprodmessages.
	 */

	public long countAll();


    public Page<SysAProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

