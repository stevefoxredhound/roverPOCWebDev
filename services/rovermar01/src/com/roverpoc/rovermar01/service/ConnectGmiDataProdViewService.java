/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class ConnectGmiDataProdView.
 * @see com.roverpoc.rovermar01.ConnectGmiDataProdView
 */

public interface ConnectGmiDataProdViewService {
   /**
	 * Creates a new connectgmidataprodview.
	 * 
	 * @param created
	 *            The information of the created connectgmidataprodview.
	 * @return The created connectgmidataprodview.
	 */
	public ConnectGmiDataProdView create(ConnectGmiDataProdView created);

	/**
	 * Deletes a connectgmidataprodview.
	 * 
	 * @param connectgmidataprodviewId
	 *            The id of the deleted connectgmidataprodview.
	 * @return The deleted connectgmidataprodview.
	 * @throws EntityNotFoundException
	 *             if no connectgmidataprodview is found with the given id.
	 */
	public ConnectGmiDataProdView delete(ConnectGmiDataProdViewId connectgmidataprodviewId) throws EntityNotFoundException;

	/**
	 * Finds all connectgmidataprodviews.
	 * 
	 * @return A list of connectgmidataprodviews.
	 */
	public Page<ConnectGmiDataProdView> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ConnectGmiDataProdView> findAll(Pageable pageable);
	
	/**
	 * Finds connectgmidataprodview by id.
	 * 
	 * @param id
	 *            The id of the wanted connectgmidataprodview.
	 * @return The found connectgmidataprodview. If no connectgmidataprodview is found, this method returns
	 *         null.
	 */
	public ConnectGmiDataProdView findById(ConnectGmiDataProdViewId id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a connectgmidataprodview.
	 * 
	 * @param updated
	 *            The information of the updated connectgmidataprodview.
	 * @return The updated connectgmidataprodview.
	 * @throws EntityNotFoundException
	 *             if no connectgmidataprodview is found with given id.
	 */
	public ConnectGmiDataProdView update(ConnectGmiDataProdView updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the connectgmidataprodviews in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the connectgmidataprodview.
	 */

	public long countAll();


    public Page<ConnectGmiDataProdView> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

