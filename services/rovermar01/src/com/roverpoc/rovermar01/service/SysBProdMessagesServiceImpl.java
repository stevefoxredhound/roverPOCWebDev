/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class SysBProdMessages.
 * @see com.roverpoc.rovermar01.SysBProdMessages
 */
@Service("rovermar01.SysBProdMessagesService")
public class SysBProdMessagesServiceImpl implements SysBProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SysBProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.SysBProdMessagesDao")
    private WMGenericDao<SysBProdMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SysBProdMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<SysBProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public SysBProdMessages create(SysBProdMessages sysbprodmessages) {
        LOGGER.debug("Creating a new sysbprodmessages with information: {}" , sysbprodmessages);
        return this.wmGenericDao.create(sysbprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysBProdMessages delete(Integer sysbprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting sysbprodmessages with id: {}" , sysbprodmessagesId);
        SysBProdMessages deleted = this.wmGenericDao.findById(sysbprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No sysbprodmessages found with id: {}" , sysbprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(sysbprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysBProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all sysbprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysBProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all sysbprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public SysBProdMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding sysbprodmessages by id: {}" , id);
        SysBProdMessages sysbprodmessages=this.wmGenericDao.findById(id);
        if(sysbprodmessages==null){
            LOGGER.debug("No sysbprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return sysbprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysBProdMessages update(SysBProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating sysbprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


