/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class DashboardCounts.
 * @see com.roverpoc.rovermar01.DashboardCounts
 */

public interface DashboardCountsService {
   /**
	 * Creates a new dashboardcounts.
	 * 
	 * @param created
	 *            The information of the created dashboardcounts.
	 * @return The created dashboardcounts.
	 */
	public DashboardCounts create(DashboardCounts created);

	/**
	 * Deletes a dashboardcounts.
	 * 
	 * @param dashboardcountsId
	 *            The id of the deleted dashboardcounts.
	 * @return The deleted dashboardcounts.
	 * @throws EntityNotFoundException
	 *             if no dashboardcounts is found with the given id.
	 */
	public DashboardCounts delete(Integer dashboardcountsId) throws EntityNotFoundException;

	/**
	 * Finds all dashboardcountss.
	 * 
	 * @return A list of dashboardcountss.
	 */
	public Page<DashboardCounts> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<DashboardCounts> findAll(Pageable pageable);
	
	/**
	 * Finds dashboardcounts by id.
	 * 
	 * @param id
	 *            The id of the wanted dashboardcounts.
	 * @return The found dashboardcounts. If no dashboardcounts is found, this method returns
	 *         null.
	 */
	public DashboardCounts findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a dashboardcounts.
	 * 
	 * @param updated
	 *            The information of the updated dashboardcounts.
	 * @return The updated dashboardcounts.
	 * @throws EntityNotFoundException
	 *             if no dashboardcounts is found with given id.
	 */
	public DashboardCounts update(DashboardCounts updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the dashboardcountss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the dashboardcounts.
	 */

	public long countAll();


    public Page<DashboardCounts> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

