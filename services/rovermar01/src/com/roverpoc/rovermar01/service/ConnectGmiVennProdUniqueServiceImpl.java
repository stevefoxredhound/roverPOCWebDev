/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class ConnectGmiVennProdUnique.
 * @see com.roverpoc.rovermar01.ConnectGmiVennProdUnique
 */
@Service("rovermar01.ConnectGmiVennProdUniqueService")
public class ConnectGmiVennProdUniqueServiceImpl implements ConnectGmiVennProdUniqueService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennProdUniqueServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.ConnectGmiVennProdUniqueDao")
    private WMGenericDao<ConnectGmiVennProdUnique, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectGmiVennProdUnique, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<ConnectGmiVennProdUnique> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdUnique create(ConnectGmiVennProdUnique connectgmivennprodunique) {
        LOGGER.debug("Creating a new connectgmivennprodunique with information: {}" , connectgmivennprodunique);
        return this.wmGenericDao.create(connectgmivennprodunique);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdUnique delete(BigDecimal connectgmivennproduniqueId) throws EntityNotFoundException {
        LOGGER.debug("Deleting connectgmivennprodunique with id: {}" , connectgmivennproduniqueId);
        ConnectGmiVennProdUnique deleted = this.wmGenericDao.findById(connectgmivennproduniqueId);
        if (deleted == null) {
            LOGGER.debug("No connectgmivennprodunique found with id: {}" , connectgmivennproduniqueId);
            throw new EntityNotFoundException(String.valueOf(connectgmivennproduniqueId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennProdUnique> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennproduniques");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennProdUnique> findAll(Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennproduniques");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdUnique findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding connectgmivennprodunique by id: {}" , id);
        ConnectGmiVennProdUnique connectgmivennprodunique=this.wmGenericDao.findById(id);
        if(connectgmivennprodunique==null){
            LOGGER.debug("No connectgmivennprodunique found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return connectgmivennprodunique;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdUnique update(ConnectGmiVennProdUnique updated) throws EntityNotFoundException {
        LOGGER.debug("Updating connectgmivennprodunique with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getCount_distinct_coreKey__();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


