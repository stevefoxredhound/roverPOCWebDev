/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class SysCProdMessages.
 * @see com.roverpoc.rovermar01.SysCProdMessages
 */
@Service("rovermar01.SysCProdMessagesService")
public class SysCProdMessagesServiceImpl implements SysCProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SysCProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.SysCProdMessagesDao")
    private WMGenericDao<SysCProdMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SysCProdMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<SysCProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public SysCProdMessages create(SysCProdMessages syscprodmessages) {
        LOGGER.debug("Creating a new syscprodmessages with information: {}" , syscprodmessages);
        return this.wmGenericDao.create(syscprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysCProdMessages delete(Integer syscprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting syscprodmessages with id: {}" , syscprodmessagesId);
        SysCProdMessages deleted = this.wmGenericDao.findById(syscprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No syscprodmessages found with id: {}" , syscprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(syscprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysCProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all syscprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysCProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all syscprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public SysCProdMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding syscprodmessages by id: {}" , id);
        SysCProdMessages syscprodmessages=this.wmGenericDao.findById(id);
        if(syscprodmessages==null){
            LOGGER.debug("No syscprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return syscprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysCProdMessages update(SysCProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating syscprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


