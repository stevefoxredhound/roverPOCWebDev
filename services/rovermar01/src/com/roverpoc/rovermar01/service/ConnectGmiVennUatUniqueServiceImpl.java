/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class ConnectGmiVennUatUnique.
 * @see com.roverpoc.rovermar01.ConnectGmiVennUatUnique
 */
@Service("rovermar01.ConnectGmiVennUatUniqueService")
public class ConnectGmiVennUatUniqueServiceImpl implements ConnectGmiVennUatUniqueService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennUatUniqueServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.ConnectGmiVennUatUniqueDao")
    private WMGenericDao<ConnectGmiVennUatUnique, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectGmiVennUatUnique, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<ConnectGmiVennUatUnique> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatUnique create(ConnectGmiVennUatUnique connectgmivennuatunique) {
        LOGGER.debug("Creating a new connectgmivennuatunique with information: {}" , connectgmivennuatunique);
        return this.wmGenericDao.create(connectgmivennuatunique);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatUnique delete(BigDecimal connectgmivennuatuniqueId) throws EntityNotFoundException {
        LOGGER.debug("Deleting connectgmivennuatunique with id: {}" , connectgmivennuatuniqueId);
        ConnectGmiVennUatUnique deleted = this.wmGenericDao.findById(connectgmivennuatuniqueId);
        if (deleted == null) {
            LOGGER.debug("No connectgmivennuatunique found with id: {}" , connectgmivennuatuniqueId);
            throw new EntityNotFoundException(String.valueOf(connectgmivennuatuniqueId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennUatUnique> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennuatuniques");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennUatUnique> findAll(Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennuatuniques");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatUnique findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding connectgmivennuatunique by id: {}" , id);
        ConnectGmiVennUatUnique connectgmivennuatunique=this.wmGenericDao.findById(id);
        if(connectgmivennuatunique==null){
            LOGGER.debug("No connectgmivennuatunique found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return connectgmivennuatunique;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennUatUnique update(ConnectGmiVennUatUnique updated) throws EntityNotFoundException {
        LOGGER.debug("Updating connectgmivennuatunique with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getCount_distinct_coreKey__();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


