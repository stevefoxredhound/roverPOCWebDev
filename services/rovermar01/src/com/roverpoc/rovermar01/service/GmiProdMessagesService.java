/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class GmiProdMessages.
 * @see com.roverpoc.rovermar01.GmiProdMessages
 */

public interface GmiProdMessagesService {
   /**
	 * Creates a new gmiprodmessages.
	 * 
	 * @param created
	 *            The information of the created gmiprodmessages.
	 * @return The created gmiprodmessages.
	 */
	public GmiProdMessages create(GmiProdMessages created);

	/**
	 * Deletes a gmiprodmessages.
	 * 
	 * @param gmiprodmessagesId
	 *            The id of the deleted gmiprodmessages.
	 * @return The deleted gmiprodmessages.
	 * @throws EntityNotFoundException
	 *             if no gmiprodmessages is found with the given id.
	 */
	public GmiProdMessages delete(Integer gmiprodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all gmiprodmessagess.
	 * 
	 * @return A list of gmiprodmessagess.
	 */
	public Page<GmiProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<GmiProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds gmiprodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted gmiprodmessages.
	 * @return The found gmiprodmessages. If no gmiprodmessages is found, this method returns
	 *         null.
	 */
	public GmiProdMessages findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a gmiprodmessages.
	 * 
	 * @param updated
	 *            The information of the updated gmiprodmessages.
	 * @return The updated gmiprodmessages.
	 * @throws EntityNotFoundException
	 *             if no gmiprodmessages is found with given id.
	 */
	public GmiProdMessages update(GmiProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the gmiprodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the gmiprodmessages.
	 */

	public long countAll();


    public Page<GmiProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

