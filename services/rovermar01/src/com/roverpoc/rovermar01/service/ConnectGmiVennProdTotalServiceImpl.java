/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/


import java.math.BigDecimal;



import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class ConnectGmiVennProdTotal.
 * @see com.roverpoc.rovermar01.ConnectGmiVennProdTotal
 */
@Service("rovermar01.ConnectGmiVennProdTotalService")
public class ConnectGmiVennProdTotalServiceImpl implements ConnectGmiVennProdTotalService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ConnectGmiVennProdTotalServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.ConnectGmiVennProdTotalDao")
    private WMGenericDao<ConnectGmiVennProdTotal, BigDecimal> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<ConnectGmiVennProdTotal, BigDecimal> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<ConnectGmiVennProdTotal> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdTotal create(ConnectGmiVennProdTotal connectgmivennprodtotal) {
        LOGGER.debug("Creating a new connectgmivennprodtotal with information: {}" , connectgmivennprodtotal);
        return this.wmGenericDao.create(connectgmivennprodtotal);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdTotal delete(BigDecimal connectgmivennprodtotalId) throws EntityNotFoundException {
        LOGGER.debug("Deleting connectgmivennprodtotal with id: {}" , connectgmivennprodtotalId);
        ConnectGmiVennProdTotal deleted = this.wmGenericDao.findById(connectgmivennprodtotalId);
        if (deleted == null) {
            LOGGER.debug("No connectgmivennprodtotal found with id: {}" , connectgmivennprodtotalId);
            throw new EntityNotFoundException(String.valueOf(connectgmivennprodtotalId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennProdTotal> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennprodtotals");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<ConnectGmiVennProdTotal> findAll(Pageable pageable) {
        LOGGER.debug("Finding all connectgmivennprodtotals");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdTotal findById(BigDecimal id) throws EntityNotFoundException {
        LOGGER.debug("Finding connectgmivennprodtotal by id: {}" , id);
        ConnectGmiVennProdTotal connectgmivennprodtotal=this.wmGenericDao.findById(id);
        if(connectgmivennprodtotal==null){
            LOGGER.debug("No connectgmivennprodtotal found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return connectgmivennprodtotal;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public ConnectGmiVennProdTotal update(ConnectGmiVennProdTotal updated) throws EntityNotFoundException {
        LOGGER.debug("Updating connectgmivennprodtotal with information: {}" , updated);
        this.wmGenericDao.update(updated);

        BigDecimal id = (BigDecimal)updated.getCount___();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


