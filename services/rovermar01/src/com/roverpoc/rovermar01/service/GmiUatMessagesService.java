/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class GmiUatMessages.
 * @see com.roverpoc.rovermar01.GmiUatMessages
 */

public interface GmiUatMessagesService {
   /**
	 * Creates a new gmiuatmessages.
	 * 
	 * @param created
	 *            The information of the created gmiuatmessages.
	 * @return The created gmiuatmessages.
	 */
	public GmiUatMessages create(GmiUatMessages created);

	/**
	 * Deletes a gmiuatmessages.
	 * 
	 * @param gmiuatmessagesId
	 *            The id of the deleted gmiuatmessages.
	 * @return The deleted gmiuatmessages.
	 * @throws EntityNotFoundException
	 *             if no gmiuatmessages is found with the given id.
	 */
	public GmiUatMessages delete(Integer gmiuatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all gmiuatmessagess.
	 * 
	 * @return A list of gmiuatmessagess.
	 */
	public Page<GmiUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<GmiUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds gmiuatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted gmiuatmessages.
	 * @return The found gmiuatmessages. If no gmiuatmessages is found, this method returns
	 *         null.
	 */
	public GmiUatMessages findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a gmiuatmessages.
	 * 
	 * @param updated
	 *            The information of the updated gmiuatmessages.
	 * @return The updated gmiuatmessages.
	 * @throws EntityNotFoundException
	 *             if no gmiuatmessages is found with given id.
	 */
	public GmiUatMessages update(GmiUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the gmiuatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the gmiuatmessages.
	 */

	public long countAll();


    public Page<GmiUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

