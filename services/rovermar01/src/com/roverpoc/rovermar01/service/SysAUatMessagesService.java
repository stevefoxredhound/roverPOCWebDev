/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class SysAUatMessages.
 * @see com.roverpoc.rovermar01.SysAUatMessages
 */

public interface SysAUatMessagesService {
   /**
	 * Creates a new sysauatmessages.
	 * 
	 * @param created
	 *            The information of the created sysauatmessages.
	 * @return The created sysauatmessages.
	 */
	public SysAUatMessages create(SysAUatMessages created);

	/**
	 * Deletes a sysauatmessages.
	 * 
	 * @param sysauatmessagesId
	 *            The id of the deleted sysauatmessages.
	 * @return The deleted sysauatmessages.
	 * @throws EntityNotFoundException
	 *             if no sysauatmessages is found with the given id.
	 */
	public SysAUatMessages delete(Integer sysauatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all sysauatmessagess.
	 * 
	 * @return A list of sysauatmessagess.
	 */
	public Page<SysAUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SysAUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds sysauatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted sysauatmessages.
	 * @return The found sysauatmessages. If no sysauatmessages is found, this method returns
	 *         null.
	 */
	public SysAUatMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a sysauatmessages.
	 * 
	 * @param updated
	 *            The information of the updated sysauatmessages.
	 * @return The updated sysauatmessages.
	 * @throws EntityNotFoundException
	 *             if no sysauatmessages is found with given id.
	 */
	public SysAUatMessages update(SysAUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the sysauatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the sysauatmessages.
	 */

	public long countAll();


    public Page<SysAUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

