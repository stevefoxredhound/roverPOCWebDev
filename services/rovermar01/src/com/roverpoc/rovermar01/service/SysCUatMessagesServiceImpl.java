/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class SysCUatMessages.
 * @see com.roverpoc.rovermar01.SysCUatMessages
 */
@Service("rovermar01.SysCUatMessagesService")
public class SysCUatMessagesServiceImpl implements SysCUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SysCUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.SysCUatMessagesDao")
    private WMGenericDao<SysCUatMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SysCUatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<SysCUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public SysCUatMessages create(SysCUatMessages syscuatmessages) {
        LOGGER.debug("Creating a new syscuatmessages with information: {}" , syscuatmessages);
        return this.wmGenericDao.create(syscuatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysCUatMessages delete(Integer syscuatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting syscuatmessages with id: {}" , syscuatmessagesId);
        SysCUatMessages deleted = this.wmGenericDao.findById(syscuatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No syscuatmessages found with id: {}" , syscuatmessagesId);
            throw new EntityNotFoundException(String.valueOf(syscuatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysCUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all syscuatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysCUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all syscuatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public SysCUatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding syscuatmessages by id: {}" , id);
        SysCUatMessages syscuatmessages=this.wmGenericDao.findById(id);
        if(syscuatmessages==null){
            LOGGER.debug("No syscuatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return syscuatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysCUatMessages update(SysCUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating syscuatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


