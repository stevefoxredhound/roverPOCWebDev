/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class Operators.
 * @see com.roverpoc.rovermar01.Operators
 */

public interface OperatorsService {
   /**
	 * Creates a new operators.
	 * 
	 * @param created
	 *            The information of the created operators.
	 * @return The created operators.
	 */
	public Operators create(Operators created);

	/**
	 * Deletes a operators.
	 * 
	 * @param operatorsId
	 *            The id of the deleted operators.
	 * @return The deleted operators.
	 * @throws EntityNotFoundException
	 *             if no operators is found with the given id.
	 */
	public Operators delete(Integer operatorsId) throws EntityNotFoundException;

	/**
	 * Finds all operatorss.
	 * 
	 * @return A list of operatorss.
	 */
	public Page<Operators> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Operators> findAll(Pageable pageable);
	
	/**
	 * Finds operators by id.
	 * 
	 * @param id
	 *            The id of the wanted operators.
	 * @return The found operators. If no operators is found, this method returns
	 *         null.
	 */
	public Operators findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a operators.
	 * 
	 * @param updated
	 *            The information of the updated operators.
	 * @return The updated operators.
	 * @throws EntityNotFoundException
	 *             if no operators is found with given id.
	 */
	public Operators update(Operators updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the operatorss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the operators.
	 */

	public long countAll();


    public Page<Operators> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

