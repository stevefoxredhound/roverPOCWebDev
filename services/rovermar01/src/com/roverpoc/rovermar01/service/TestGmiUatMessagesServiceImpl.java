/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class TestGmiUatMessages.
 * @see com.roverpoc.rovermar01.TestGmiUatMessages
 */
@Service("rovermar01.TestGmiUatMessagesService")
public class TestGmiUatMessagesServiceImpl implements TestGmiUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TestGmiUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.TestGmiUatMessagesDao")
    private WMGenericDao<TestGmiUatMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestGmiUatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<TestGmiUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public TestGmiUatMessages create(TestGmiUatMessages testgmiuatmessages) {
        LOGGER.debug("Creating a new testgmiuatmessages with information: {}" , testgmiuatmessages);
        return this.wmGenericDao.create(testgmiuatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestGmiUatMessages delete(Integer testgmiuatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting testgmiuatmessages with id: {}" , testgmiuatmessagesId);
        TestGmiUatMessages deleted = this.wmGenericDao.findById(testgmiuatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No testgmiuatmessages found with id: {}" , testgmiuatmessagesId);
            throw new EntityNotFoundException(String.valueOf(testgmiuatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestGmiUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all testgmiuatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestGmiUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all testgmiuatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public TestGmiUatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding testgmiuatmessages by id: {}" , id);
        TestGmiUatMessages testgmiuatmessages=this.wmGenericDao.findById(id);
        if(testgmiuatmessages==null){
            LOGGER.debug("No testgmiuatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return testgmiuatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestGmiUatMessages update(TestGmiUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating testgmiuatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


