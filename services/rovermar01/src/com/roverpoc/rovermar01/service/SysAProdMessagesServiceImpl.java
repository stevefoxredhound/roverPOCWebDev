/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class SysAProdMessages.
 * @see com.roverpoc.rovermar01.SysAProdMessages
 */
@Service("rovermar01.SysAProdMessagesService")
public class SysAProdMessagesServiceImpl implements SysAProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(SysAProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.SysAProdMessagesDao")
    private WMGenericDao<SysAProdMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<SysAProdMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<SysAProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public SysAProdMessages create(SysAProdMessages sysaprodmessages) {
        LOGGER.debug("Creating a new sysaprodmessages with information: {}" , sysaprodmessages);
        return this.wmGenericDao.create(sysaprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysAProdMessages delete(Integer sysaprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting sysaprodmessages with id: {}" , sysaprodmessagesId);
        SysAProdMessages deleted = this.wmGenericDao.findById(sysaprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No sysaprodmessages found with id: {}" , sysaprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(sysaprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysAProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all sysaprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<SysAProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all sysaprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public SysAProdMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding sysaprodmessages by id: {}" , id);
        SysAProdMessages sysaprodmessages=this.wmGenericDao.findById(id);
        if(sysaprodmessages==null){
            LOGGER.debug("No sysaprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return sysaprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public SysAProdMessages update(SysAProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating sysaprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


