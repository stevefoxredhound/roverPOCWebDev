/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class Control.
 * @see com.roverpoc.rovermar01.Control
 */
@Service("rovermar01.ControlService")
public class ControlServiceImpl implements ControlService {


    private static final Logger LOGGER = LoggerFactory.getLogger(ControlServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.ControlDao")
    private WMGenericDao<Control, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<Control, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<Control> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public Control create(Control control) {
        LOGGER.debug("Creating a new control with information: {}" , control);
        return this.wmGenericDao.create(control);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public Control delete(Integer controlId) throws EntityNotFoundException {
        LOGGER.debug("Deleting control with id: {}" , controlId);
        Control deleted = this.wmGenericDao.findById(controlId);
        if (deleted == null) {
            LOGGER.debug("No control found with id: {}" , controlId);
            throw new EntityNotFoundException(String.valueOf(controlId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<Control> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all controls");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<Control> findAll(Pageable pageable) {
        LOGGER.debug("Finding all controls");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Control findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding control by id: {}" , id);
        Control control=this.wmGenericDao.findById(id);
        if(control==null){
            LOGGER.debug("No control found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return control;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public Control update(Control updated) throws EntityNotFoundException {
        LOGGER.debug("Updating control with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


