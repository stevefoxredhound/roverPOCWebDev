/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class TestNcliteUatMessages.
 * @see com.roverpoc.rovermar01.TestNcliteUatMessages
 */
@Service("rovermar01.TestNcliteUatMessagesService")
public class TestNcliteUatMessagesServiceImpl implements TestNcliteUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TestNcliteUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.TestNcliteUatMessagesDao")
    private WMGenericDao<TestNcliteUatMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestNcliteUatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<TestNcliteUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public TestNcliteUatMessages create(TestNcliteUatMessages testncliteuatmessages) {
        LOGGER.debug("Creating a new testncliteuatmessages with information: {}" , testncliteuatmessages);
        return this.wmGenericDao.create(testncliteuatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestNcliteUatMessages delete(Integer testncliteuatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting testncliteuatmessages with id: {}" , testncliteuatmessagesId);
        TestNcliteUatMessages deleted = this.wmGenericDao.findById(testncliteuatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No testncliteuatmessages found with id: {}" , testncliteuatmessagesId);
            throw new EntityNotFoundException(String.valueOf(testncliteuatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestNcliteUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all testncliteuatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestNcliteUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all testncliteuatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public TestNcliteUatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding testncliteuatmessages by id: {}" , id);
        TestNcliteUatMessages testncliteuatmessages=this.wmGenericDao.findById(id);
        if(testncliteuatmessages==null){
            LOGGER.debug("No testncliteuatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return testncliteuatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestNcliteUatMessages update(TestNcliteUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating testncliteuatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


