/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class TestGmiProdMessages.
 * @see com.roverpoc.rovermar01.TestGmiProdMessages
 */

public interface TestGmiProdMessagesService {
   /**
	 * Creates a new testgmiprodmessages.
	 * 
	 * @param created
	 *            The information of the created testgmiprodmessages.
	 * @return The created testgmiprodmessages.
	 */
	public TestGmiProdMessages create(TestGmiProdMessages created);

	/**
	 * Deletes a testgmiprodmessages.
	 * 
	 * @param testgmiprodmessagesId
	 *            The id of the deleted testgmiprodmessages.
	 * @return The deleted testgmiprodmessages.
	 * @throws EntityNotFoundException
	 *             if no testgmiprodmessages is found with the given id.
	 */
	public TestGmiProdMessages delete(Integer testgmiprodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all testgmiprodmessagess.
	 * 
	 * @return A list of testgmiprodmessagess.
	 */
	public Page<TestGmiProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TestGmiProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds testgmiprodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted testgmiprodmessages.
	 * @return The found testgmiprodmessages. If no testgmiprodmessages is found, this method returns
	 *         null.
	 */
	public TestGmiProdMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a testgmiprodmessages.
	 * 
	 * @param updated
	 *            The information of the updated testgmiprodmessages.
	 * @return The updated testgmiprodmessages.
	 * @throws EntityNotFoundException
	 *             if no testgmiprodmessages is found with given id.
	 */
	public TestGmiProdMessages update(TestGmiProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the testgmiprodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the testgmiprodmessages.
	 */

	public long countAll();


    public Page<TestGmiProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

