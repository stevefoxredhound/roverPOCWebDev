/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class SysBUatMessages.
 * @see com.roverpoc.rovermar01.SysBUatMessages
 */

public interface SysBUatMessagesService {
   /**
	 * Creates a new sysbuatmessages.
	 * 
	 * @param created
	 *            The information of the created sysbuatmessages.
	 * @return The created sysbuatmessages.
	 */
	public SysBUatMessages create(SysBUatMessages created);

	/**
	 * Deletes a sysbuatmessages.
	 * 
	 * @param sysbuatmessagesId
	 *            The id of the deleted sysbuatmessages.
	 * @return The deleted sysbuatmessages.
	 * @throws EntityNotFoundException
	 *             if no sysbuatmessages is found with the given id.
	 */
	public SysBUatMessages delete(Integer sysbuatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all sysbuatmessagess.
	 * 
	 * @return A list of sysbuatmessagess.
	 */
	public Page<SysBUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SysBUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds sysbuatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted sysbuatmessages.
	 * @return The found sysbuatmessages. If no sysbuatmessages is found, this method returns
	 *         null.
	 */
	public SysBUatMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a sysbuatmessages.
	 * 
	 * @param updated
	 *            The information of the updated sysbuatmessages.
	 * @return The updated sysbuatmessages.
	 * @throws EntityNotFoundException
	 *             if no sysbuatmessages is found with given id.
	 */
	public SysBUatMessages update(SysBUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the sysbuatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the sysbuatmessages.
	 */

	public long countAll();


    public Page<SysBUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

