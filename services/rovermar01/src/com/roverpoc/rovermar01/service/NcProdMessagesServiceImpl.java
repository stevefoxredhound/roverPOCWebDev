/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class NcProdMessages.
 * @see com.roverpoc.rovermar01.NcProdMessages
 */
@Service("rovermar01.NcProdMessagesService")
public class NcProdMessagesServiceImpl implements NcProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NcProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.NcProdMessagesDao")
    private WMGenericDao<NcProdMessages, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<NcProdMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<NcProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public NcProdMessages create(NcProdMessages ncprodmessages) {
        LOGGER.debug("Creating a new ncprodmessages with information: {}" , ncprodmessages);
        return this.wmGenericDao.create(ncprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public NcProdMessages delete(Integer ncprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ncprodmessages with id: {}" , ncprodmessagesId);
        NcProdMessages deleted = this.wmGenericDao.findById(ncprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No ncprodmessages found with id: {}" , ncprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(ncprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<NcProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ncprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<NcProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all ncprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public NcProdMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding ncprodmessages by id: {}" , id);
        NcProdMessages ncprodmessages=this.wmGenericDao.findById(id);
        if(ncprodmessages==null){
            LOGGER.debug("No ncprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return ncprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public NcProdMessages update(NcProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating ncprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


