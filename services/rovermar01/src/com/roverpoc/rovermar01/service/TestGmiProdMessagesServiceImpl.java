/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class TestGmiProdMessages.
 * @see com.roverpoc.rovermar01.TestGmiProdMessages
 */
@Service("rovermar01.TestGmiProdMessagesService")
public class TestGmiProdMessagesServiceImpl implements TestGmiProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TestGmiProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.TestGmiProdMessagesDao")
    private WMGenericDao<TestGmiProdMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestGmiProdMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<TestGmiProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public TestGmiProdMessages create(TestGmiProdMessages testgmiprodmessages) {
        LOGGER.debug("Creating a new testgmiprodmessages with information: {}" , testgmiprodmessages);
        return this.wmGenericDao.create(testgmiprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestGmiProdMessages delete(Integer testgmiprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting testgmiprodmessages with id: {}" , testgmiprodmessagesId);
        TestGmiProdMessages deleted = this.wmGenericDao.findById(testgmiprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No testgmiprodmessages found with id: {}" , testgmiprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(testgmiprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestGmiProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all testgmiprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestGmiProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all testgmiprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public TestGmiProdMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding testgmiprodmessages by id: {}" , id);
        TestGmiProdMessages testgmiprodmessages=this.wmGenericDao.findById(id);
        if(testgmiprodmessages==null){
            LOGGER.debug("No testgmiprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return testgmiprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestGmiProdMessages update(TestGmiProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating testgmiprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


