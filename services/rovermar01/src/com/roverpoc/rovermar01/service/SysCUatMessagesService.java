/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class SysCUatMessages.
 * @see com.roverpoc.rovermar01.SysCUatMessages
 */

public interface SysCUatMessagesService {
   /**
	 * Creates a new syscuatmessages.
	 * 
	 * @param created
	 *            The information of the created syscuatmessages.
	 * @return The created syscuatmessages.
	 */
	public SysCUatMessages create(SysCUatMessages created);

	/**
	 * Deletes a syscuatmessages.
	 * 
	 * @param syscuatmessagesId
	 *            The id of the deleted syscuatmessages.
	 * @return The deleted syscuatmessages.
	 * @throws EntityNotFoundException
	 *             if no syscuatmessages is found with the given id.
	 */
	public SysCUatMessages delete(Integer syscuatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all syscuatmessagess.
	 * 
	 * @return A list of syscuatmessagess.
	 */
	public Page<SysCUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<SysCUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds syscuatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted syscuatmessages.
	 * @return The found syscuatmessages. If no syscuatmessages is found, this method returns
	 *         null.
	 */
	public SysCUatMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a syscuatmessages.
	 * 
	 * @param updated
	 *            The information of the updated syscuatmessages.
	 * @return The updated syscuatmessages.
	 * @throws EntityNotFoundException
	 *             if no syscuatmessages is found with given id.
	 */
	public SysCUatMessages update(SysCUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the syscuatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the syscuatmessages.
	 */

	public long countAll();


    public Page<SysCUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

