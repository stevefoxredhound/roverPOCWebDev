/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/





import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;


/**
 * ServiceImpl object for domain model class TestNcliteProdMessages.
 * @see com.roverpoc.rovermar01.TestNcliteProdMessages
 */
@Service("rovermar01.TestNcliteProdMessagesService")
public class TestNcliteProdMessagesServiceImpl implements TestNcliteProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(TestNcliteProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rovermar01.TestNcliteProdMessagesDao")
    private WMGenericDao<TestNcliteProdMessages, Integer> wmGenericDao;

    public void setWMGenericDao(WMGenericDao<TestNcliteProdMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rovermar01TransactionManager")
     public Page<TestNcliteProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rovermar01TransactionManager")
    @Override
    public TestNcliteProdMessages create(TestNcliteProdMessages testncliteprodmessages) {
        LOGGER.debug("Creating a new testncliteprodmessages with information: {}" , testncliteprodmessages);
        return this.wmGenericDao.create(testncliteprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestNcliteProdMessages delete(Integer testncliteprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting testncliteprodmessages with id: {}" , testncliteprodmessagesId);
        TestNcliteProdMessages deleted = this.wmGenericDao.findById(testncliteprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No testncliteprodmessages found with id: {}" , testncliteprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(testncliteprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestNcliteProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all testncliteprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public Page<TestNcliteProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all testncliteprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public TestNcliteProdMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding testncliteprodmessages by id: {}" , id);
        TestNcliteProdMessages testncliteprodmessages=this.wmGenericDao.findById(id);
        if(testncliteprodmessages==null){
            LOGGER.debug("No testncliteprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return testncliteprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rovermar01TransactionManager")
    @Override
    public TestNcliteProdMessages update(TestNcliteProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating testncliteprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);

        Integer id = (Integer)updated.getId();

        return this.wmGenericDao.findById(id);
    }

    @Transactional(readOnly = true, value = "rovermar01TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


