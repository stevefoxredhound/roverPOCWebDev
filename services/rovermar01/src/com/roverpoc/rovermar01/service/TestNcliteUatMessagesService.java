/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class TestNcliteUatMessages.
 * @see com.roverpoc.rovermar01.TestNcliteUatMessages
 */

public interface TestNcliteUatMessagesService {
   /**
	 * Creates a new testncliteuatmessages.
	 * 
	 * @param created
	 *            The information of the created testncliteuatmessages.
	 * @return The created testncliteuatmessages.
	 */
	public TestNcliteUatMessages create(TestNcliteUatMessages created);

	/**
	 * Deletes a testncliteuatmessages.
	 * 
	 * @param testncliteuatmessagesId
	 *            The id of the deleted testncliteuatmessages.
	 * @return The deleted testncliteuatmessages.
	 * @throws EntityNotFoundException
	 *             if no testncliteuatmessages is found with the given id.
	 */
	public TestNcliteUatMessages delete(Integer testncliteuatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all testncliteuatmessagess.
	 * 
	 * @return A list of testncliteuatmessagess.
	 */
	public Page<TestNcliteUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TestNcliteUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds testncliteuatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted testncliteuatmessages.
	 * @return The found testncliteuatmessages. If no testncliteuatmessages is found, this method returns
	 *         null.
	 */
	public TestNcliteUatMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a testncliteuatmessages.
	 * 
	 * @param updated
	 *            The information of the updated testncliteuatmessages.
	 * @return The updated testncliteuatmessages.
	 * @throws EntityNotFoundException
	 *             if no testncliteuatmessages is found with given id.
	 */
	public TestNcliteUatMessages update(TestNcliteUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the testncliteuatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the testncliteuatmessages.
	 */

	public long countAll();


    public Page<TestNcliteUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

