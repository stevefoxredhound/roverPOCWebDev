/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class CollatedGroups.
 * @see com.roverpoc.rovermar01.CollatedGroups
 */

public interface CollatedGroupsService {
   /**
	 * Creates a new collatedgroups.
	 * 
	 * @param created
	 *            The information of the created collatedgroups.
	 * @return The created collatedgroups.
	 */
	public CollatedGroups create(CollatedGroups created);

	/**
	 * Deletes a collatedgroups.
	 * 
	 * @param collatedgroupsId
	 *            The id of the deleted collatedgroups.
	 * @return The deleted collatedgroups.
	 * @throws EntityNotFoundException
	 *             if no collatedgroups is found with the given id.
	 */
	public CollatedGroups delete(Integer collatedgroupsId) throws EntityNotFoundException;

	/**
	 * Finds all collatedgroupss.
	 * 
	 * @return A list of collatedgroupss.
	 */
	public Page<CollatedGroups> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<CollatedGroups> findAll(Pageable pageable);
	
	/**
	 * Finds collatedgroups by id.
	 * 
	 * @param id
	 *            The id of the wanted collatedgroups.
	 * @return The found collatedgroups. If no collatedgroups is found, this method returns
	 *         null.
	 */
	public CollatedGroups findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a collatedgroups.
	 * 
	 * @param updated
	 *            The information of the updated collatedgroups.
	 * @return The updated collatedgroups.
	 * @throws EntityNotFoundException
	 *             if no collatedgroups is found with given id.
	 */
	public CollatedGroups update(CollatedGroups updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the collatedgroupss in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the collatedgroups.
	 */

	public long countAll();


    public Page<CollatedGroups> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

