/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class TestNcliteProdMessages.
 * @see com.roverpoc.rovermar01.TestNcliteProdMessages
 */

public interface TestNcliteProdMessagesService {
   /**
	 * Creates a new testncliteprodmessages.
	 * 
	 * @param created
	 *            The information of the created testncliteprodmessages.
	 * @return The created testncliteprodmessages.
	 */
	public TestNcliteProdMessages create(TestNcliteProdMessages created);

	/**
	 * Deletes a testncliteprodmessages.
	 * 
	 * @param testncliteprodmessagesId
	 *            The id of the deleted testncliteprodmessages.
	 * @return The deleted testncliteprodmessages.
	 * @throws EntityNotFoundException
	 *             if no testncliteprodmessages is found with the given id.
	 */
	public TestNcliteProdMessages delete(Integer testncliteprodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all testncliteprodmessagess.
	 * 
	 * @return A list of testncliteprodmessagess.
	 */
	public Page<TestNcliteProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TestNcliteProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds testncliteprodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted testncliteprodmessages.
	 * @return The found testncliteprodmessages. If no testncliteprodmessages is found, this method returns
	 *         null.
	 */
	public TestNcliteProdMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a testncliteprodmessages.
	 * 
	 * @param updated
	 *            The information of the updated testncliteprodmessages.
	 * @return The updated testncliteprodmessages.
	 * @throws EntityNotFoundException
	 *             if no testncliteprodmessages is found with given id.
	 */
	public TestNcliteProdMessages update(TestNcliteProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the testncliteprodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the testncliteprodmessages.
	 */

	public long countAll();


    public Page<TestNcliteProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

