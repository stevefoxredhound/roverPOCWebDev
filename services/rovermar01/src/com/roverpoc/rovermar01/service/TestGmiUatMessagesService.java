/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rovermar01.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rovermar01.*;

/**
 * Service object for domain model class TestGmiUatMessages.
 * @see com.roverpoc.rovermar01.TestGmiUatMessages
 */

public interface TestGmiUatMessagesService {
   /**
	 * Creates a new testgmiuatmessages.
	 * 
	 * @param created
	 *            The information of the created testgmiuatmessages.
	 * @return The created testgmiuatmessages.
	 */
	public TestGmiUatMessages create(TestGmiUatMessages created);

	/**
	 * Deletes a testgmiuatmessages.
	 * 
	 * @param testgmiuatmessagesId
	 *            The id of the deleted testgmiuatmessages.
	 * @return The deleted testgmiuatmessages.
	 * @throws EntityNotFoundException
	 *             if no testgmiuatmessages is found with the given id.
	 */
	public TestGmiUatMessages delete(Integer testgmiuatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all testgmiuatmessagess.
	 * 
	 * @return A list of testgmiuatmessagess.
	 */
	public Page<TestGmiUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<TestGmiUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds testgmiuatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted testgmiuatmessages.
	 * @return The found testgmiuatmessages. If no testgmiuatmessages is found, this method returns
	 *         null.
	 */
	public TestGmiUatMessages findById(Integer id) throws
	 EntityNotFoundException;
	/**
	 * Updates the information of a testgmiuatmessages.
	 * 
	 * @param updated
	 *            The information of the updated testgmiuatmessages.
	 * @return The updated testgmiuatmessages.
	 * @throws EntityNotFoundException
	 *             if no testgmiuatmessages is found with given id.
	 */
	public TestGmiUatMessages update(TestGmiUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the testgmiuatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the testgmiuatmessages.
	 */

	public long countAll();


    public Page<TestGmiUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

