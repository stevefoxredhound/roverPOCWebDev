/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rover2.service.ProdMessagesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rover2.*;
import com.roverpoc.rover2.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class ProdMessages.
 * @see com.roverpoc.rover2.ProdMessages
 */
@RestController(value = "Rover2.ProdMessagesController")
@RequestMapping("/rover2/ProdMessages")
@Api(description = "Exposes APIs to work with ProdMessages resource.", value = "ProdMessagesController")
public class ProdMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(ProdMessagesController.class);

    @Autowired
    @Qualifier("rover2.ProdMessagesService")
    private ProdMessagesService prodMessagesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of ProdMessages instances matching the search criteria.")
    public Page<ProdMessages> findProdMessagess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering ProdMessagess list");
        return prodMessagesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of ProdMessages instances.")
    public Page<ProdMessages> getProdMessagess(Pageable pageable) {
        LOGGER.debug("Rendering ProdMessagess list");
        return prodMessagesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the ProdMessages instance associated with the given id.")
    public ProdMessages getProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting ProdMessages with id: {}", id);
        ProdMessages instance = prodMessagesService.findById(id);
        LOGGER.debug("ProdMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the ProdMessages instance associated with the given id.")
    public boolean deleteProdMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting ProdMessages with id: {}", id);
        ProdMessages deleted = prodMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the ProdMessages instance associated with the given id.")
    public ProdMessages editProdMessages(@PathVariable("id") Integer id, @RequestBody ProdMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing ProdMessages with id: {}", instance.getId());
        instance.setId(id);
        instance = prodMessagesService.update(instance);
        LOGGER.debug("ProdMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new ProdMessages instance.")
    public ProdMessages createProdMessages(@RequestBody ProdMessages instance) {
        LOGGER.debug("Create ProdMessages with information: {}", instance);
        instance = prodMessagesService.create(instance);
        LOGGER.debug("Created ProdMessages with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setProdMessagesService(ProdMessagesService service) {
        this.prodMessagesService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of ProdMessages instances.")
    public Long countAllProdMessagess() {
        LOGGER.debug("counting ProdMessagess");
        Long count = prodMessagesService.countAll();
        return count;
    }
}
