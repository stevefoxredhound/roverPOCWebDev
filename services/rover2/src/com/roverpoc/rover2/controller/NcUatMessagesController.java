/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rover2.service.NcUatMessagesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rover2.*;
import com.roverpoc.rover2.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class NcUatMessages.
 * @see com.roverpoc.rover2.NcUatMessages
 */
@RestController(value = "Rover2.NcUatMessagesController")
@RequestMapping("/rover2/NcUatMessages")
@Api(description = "Exposes APIs to work with NcUatMessages resource.", value = "NcUatMessagesController")
public class NcUatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(NcUatMessagesController.class);

    @Autowired
    @Qualifier("rover2.NcUatMessagesService")
    private NcUatMessagesService ncUatMessagesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of NcUatMessages instances matching the search criteria.")
    public Page<NcUatMessages> findNcUatMessagess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering NcUatMessagess list");
        return ncUatMessagesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of NcUatMessages instances.")
    public Page<NcUatMessages> getNcUatMessagess(Pageable pageable) {
        LOGGER.debug("Rendering NcUatMessagess list");
        return ncUatMessagesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the NcUatMessages instance associated with the given id.")
    public NcUatMessages getNcUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting NcUatMessages with id: {}", id);
        NcUatMessages instance = ncUatMessagesService.findById(id);
        LOGGER.debug("NcUatMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the NcUatMessages instance associated with the given id.")
    public boolean deleteNcUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting NcUatMessages with id: {}", id);
        NcUatMessages deleted = ncUatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the NcUatMessages instance associated with the given id.")
    public NcUatMessages editNcUatMessages(@PathVariable("id") Integer id, @RequestBody NcUatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing NcUatMessages with id: {}", instance.getId());
        instance.setId(id);
        instance = ncUatMessagesService.update(instance);
        LOGGER.debug("NcUatMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new NcUatMessages instance.")
    public NcUatMessages createNcUatMessages(@RequestBody NcUatMessages instance) {
        LOGGER.debug("Create NcUatMessages with information: {}", instance);
        instance = ncUatMessagesService.create(instance);
        LOGGER.debug("Created NcUatMessages with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setNcUatMessagesService(NcUatMessagesService service) {
        this.ncUatMessagesService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of NcUatMessages instances.")
    public Long countAllNcUatMessagess() {
        LOGGER.debug("counting NcUatMessagess");
        Long count = ncUatMessagesService.countAll();
        return count;
    }
}
