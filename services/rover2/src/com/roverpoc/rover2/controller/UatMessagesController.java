/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.controller;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/
import com.roverpoc.rover2.service.UatMessagesService;
import java.io.*;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.hibernate.TypeMismatchException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.util.WMMultipartUtils;
import com.wavemaker.runtime.util.WMRuntimeUtils;
import com.wordnik.swagger.annotations.*;
import com.roverpoc.rover2.*;
import com.roverpoc.rover2.service.*;
import com.wavemaker.tools.api.core.annotations.WMAccessVisibility;
import com.wavemaker.tools.api.core.models.AccessSpecifier;

/**
 * Controller object for domain model class UatMessages.
 * @see com.roverpoc.rover2.UatMessages
 */
@RestController(value = "Rover2.UatMessagesController")
@RequestMapping("/rover2/UatMessages")
@Api(description = "Exposes APIs to work with UatMessages resource.", value = "UatMessagesController")
public class UatMessagesController {

    private static final Logger LOGGER = LoggerFactory.getLogger(UatMessagesController.class);

    @Autowired
    @Qualifier("rover2.UatMessagesService")
    private UatMessagesService uatMessagesService;

    @RequestMapping(value = "/search", method = RequestMethod.POST)
    @ApiOperation(value = "Returns the list of UatMessages instances matching the search criteria.")
    public Page<UatMessages> findUatMessagess(Pageable pageable, @RequestBody QueryFilter[] queryFilters) {
        LOGGER.debug("Rendering UatMessagess list");
        return uatMessagesService.findAll(queryFilters, pageable);
    }

    @RequestMapping(value = "/", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the list of UatMessages instances.")
    public Page<UatMessages> getUatMessagess(Pageable pageable) {
        LOGGER.debug("Rendering UatMessagess list");
        return uatMessagesService.findAll(pageable);
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.GET)
    @ApiOperation(value = "Returns the UatMessages instance associated with the given id.")
    public UatMessages getUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Getting UatMessages with id: {}", id);
        UatMessages instance = uatMessagesService.findById(id);
        LOGGER.debug("UatMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.DELETE)
    @ApiOperation(value = "Deletes the UatMessages instance associated with the given id.")
    public boolean deleteUatMessages(@PathVariable("id") Integer id) throws EntityNotFoundException {
        LOGGER.debug("Deleting UatMessages with id: {}", id);
        UatMessages deleted = uatMessagesService.delete(id);
        return deleted != null;
    }

    @RequestMapping(value = "/{id:.+}", method = RequestMethod.PUT)
    @ApiOperation(value = "Updates the UatMessages instance associated with the given id.")
    public UatMessages editUatMessages(@PathVariable("id") Integer id, @RequestBody UatMessages instance) throws EntityNotFoundException {
        LOGGER.debug("Editing UatMessages with id: {}", instance.getId());
        instance.setId(id);
        instance = uatMessagesService.update(instance);
        LOGGER.debug("UatMessages details with id: {}", instance);
        return instance;
    }

    @RequestMapping(value = "/", method = RequestMethod.POST)
    @ApiOperation(value = "Creates a new UatMessages instance.")
    public UatMessages createUatMessages(@RequestBody UatMessages instance) {
        LOGGER.debug("Create UatMessages with information: {}", instance);
        instance = uatMessagesService.create(instance);
        LOGGER.debug("Created UatMessages with information: {}", instance);
        return instance;
    }

    /**
	 * This setter method should only be used by unit tests
	 * 
	 * @param service
	 */
    protected void setUatMessagesService(UatMessagesService service) {
        this.uatMessagesService = service;
    }

    @RequestMapping(value = "/count", method = RequestMethod.GET)
    @WMAccessVisibility(value = AccessSpecifier.APP_ONLY)
    @ApiOperation(value = "Returns the total count of UatMessages instances.")
    public Long countAllUatMessagess() {
        LOGGER.debug("counting UatMessagess");
        Long count = uatMessagesService.countAll();
        return count;
    }
}
