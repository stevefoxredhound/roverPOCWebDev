/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class NclUatMessages.
 * @see com.roverpoc.rover2.NclUatMessages
 */

public interface NclUatMessagesService {
   /**
	 * Creates a new ncluatmessages.
	 * 
	 * @param created
	 *            The information of the created ncluatmessages.
	 * @return The created ncluatmessages.
	 */
	public NclUatMessages create(NclUatMessages created);

	/**
	 * Deletes a ncluatmessages.
	 * 
	 * @param ncluatmessagesId
	 *            The id of the deleted ncluatmessages.
	 * @return The deleted ncluatmessages.
	 * @throws EntityNotFoundException
	 *             if no ncluatmessages is found with the given id.
	 */
	public NclUatMessages delete(NclUatMessagesId ncluatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all ncluatmessagess.
	 * 
	 * @return A list of ncluatmessagess.
	 */
	public Page<NclUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NclUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds ncluatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted ncluatmessages.
	 * @return The found ncluatmessages. If no ncluatmessages is found, this method returns
	 *         null.
	 */
	public NclUatMessages findById(NclUatMessagesId id) throws EntityNotFoundException;
	/**
	 * Updates the information of a ncluatmessages.
	 * 
	 * @param updated
	 *            The information of the updated ncluatmessages.
	 * @return The updated ncluatmessages.
	 * @throws EntityNotFoundException
	 *             if no ncluatmessages is found with given id.
	 */
	public NclUatMessages update(NclUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the ncluatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the ncluatmessages.
	 */

	public long countAll();


    public Page<NclUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

