/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class NcUatMessages.
 * @see com.roverpoc.rover2.NcUatMessages
 */

public interface NcUatMessagesService {
   /**
	 * Creates a new ncuatmessages.
	 * 
	 * @param created
	 *            The information of the created ncuatmessages.
	 * @return The created ncuatmessages.
	 */
	public NcUatMessages create(NcUatMessages created);

	/**
	 * Deletes a ncuatmessages.
	 * 
	 * @param ncuatmessagesId
	 *            The id of the deleted ncuatmessages.
	 * @return The deleted ncuatmessages.
	 * @throws EntityNotFoundException
	 *             if no ncuatmessages is found with the given id.
	 */
	public NcUatMessages delete(Integer ncuatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all ncuatmessagess.
	 * 
	 * @return A list of ncuatmessagess.
	 */
	public Page<NcUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NcUatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds ncuatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted ncuatmessages.
	 * @return The found ncuatmessages. If no ncuatmessages is found, this method returns
	 *         null.
	 */
	public NcUatMessages findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a ncuatmessages.
	 * 
	 * @param updated
	 *            The information of the updated ncuatmessages.
	 * @return The updated ncuatmessages.
	 * @throws EntityNotFoundException
	 *             if no ncuatmessages is found with given id.
	 */
	public NcUatMessages update(NcUatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the ncuatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the ncuatmessages.
	 */

	public long countAll();


    public Page<NcUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

