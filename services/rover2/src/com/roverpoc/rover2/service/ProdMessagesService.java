/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class ProdMessages.
 * @see com.roverpoc.rover2.ProdMessages
 */

public interface ProdMessagesService {
   /**
	 * Creates a new prodmessages.
	 * 
	 * @param created
	 *            The information of the created prodmessages.
	 * @return The created prodmessages.
	 */
	public ProdMessages create(ProdMessages created);

	/**
	 * Deletes a prodmessages.
	 * 
	 * @param prodmessagesId
	 *            The id of the deleted prodmessages.
	 * @return The deleted prodmessages.
	 * @throws EntityNotFoundException
	 *             if no prodmessages is found with the given id.
	 */
	public ProdMessages delete(Integer prodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all prodmessagess.
	 * 
	 * @return A list of prodmessagess.
	 */
	public Page<ProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds prodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted prodmessages.
	 * @return The found prodmessages. If no prodmessages is found, this method returns
	 *         null.
	 */
	public ProdMessages findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a prodmessages.
	 * 
	 * @param updated
	 *            The information of the updated prodmessages.
	 * @return The updated prodmessages.
	 * @throws EntityNotFoundException
	 *             if no prodmessages is found with given id.
	 */
	public ProdMessages update(ProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the prodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the prodmessages.
	 */

	public long countAll();


    public Page<ProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

