/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class Logging.
 * @see com.roverpoc.rover2.Logging
 */

public interface LoggingService {
   /**
	 * Creates a new logging.
	 * 
	 * @param created
	 *            The information of the created logging.
	 * @return The created logging.
	 */
	public Logging create(Logging created);

	/**
	 * Deletes a logging.
	 * 
	 * @param loggingId
	 *            The id of the deleted logging.
	 * @return The deleted logging.
	 * @throws EntityNotFoundException
	 *             if no logging is found with the given id.
	 */
	public Logging delete(Integer loggingId) throws EntityNotFoundException;

	/**
	 * Finds all loggings.
	 * 
	 * @return A list of loggings.
	 */
	public Page<Logging> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Logging> findAll(Pageable pageable);
	
	/**
	 * Finds logging by id.
	 * 
	 * @param id
	 *            The id of the wanted logging.
	 * @return The found logging. If no logging is found, this method returns
	 *         null.
	 */
	public Logging findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a logging.
	 * 
	 * @param updated
	 *            The information of the updated logging.
	 * @return The updated logging.
	 * @throws EntityNotFoundException
	 *             if no logging is found with given id.
	 */
	public Logging update(Logging updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the loggings in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the logging.
	 */

	public long countAll();


    public Page<Logging> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

