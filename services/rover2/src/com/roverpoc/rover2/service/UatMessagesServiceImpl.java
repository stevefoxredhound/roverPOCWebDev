/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class UatMessages.
 * @see com.roverpoc.rover2.UatMessages
 */
@Service("rover2.UatMessagesService")
public class UatMessagesServiceImpl implements UatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(UatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rover2.UatMessagesDao")
    private WMGenericDao<UatMessages, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<UatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<UatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public UatMessages create(UatMessages uatmessages) {
        LOGGER.debug("Creating a new uatmessages with information: {}" , uatmessages);
        return this.wmGenericDao.create(uatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public UatMessages delete(Integer uatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting uatmessages with id: {}" , uatmessagesId);
        UatMessages deleted = this.wmGenericDao.findById(uatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No uatmessages found with id: {}" , uatmessagesId);
            throw new EntityNotFoundException(String.valueOf(uatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<UatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all uatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<UatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all uatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public UatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding uatmessages by id: {}" , id);
        UatMessages uatmessages=this.wmGenericDao.findById(id);
        if(uatmessages==null){
            LOGGER.debug("No uatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return uatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public UatMessages update(UatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating uatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


