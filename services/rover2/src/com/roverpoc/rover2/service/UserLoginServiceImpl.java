/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class UserLogin.
 * @see com.roverpoc.rover2.UserLogin
 */
@Service("rover2.UserLoginService")
public class UserLoginServiceImpl implements UserLoginService {


    private static final Logger LOGGER = LoggerFactory.getLogger(UserLoginServiceImpl.class);

    @Autowired
    @Qualifier("rover2.UserLoginDao")
    private WMGenericDao<UserLogin, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<UserLogin, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<UserLogin> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public UserLogin create(UserLogin userlogin) {
        LOGGER.debug("Creating a new userlogin with information: {}" , userlogin);
        return this.wmGenericDao.create(userlogin);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public UserLogin delete(Integer userloginId) throws EntityNotFoundException {
        LOGGER.debug("Deleting userlogin with id: {}" , userloginId);
        UserLogin deleted = this.wmGenericDao.findById(userloginId);
        if (deleted == null) {
            LOGGER.debug("No userlogin found with id: {}" , userloginId);
            throw new EntityNotFoundException(String.valueOf(userloginId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<UserLogin> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all userlogins");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<UserLogin> findAll(Pageable pageable) {
        LOGGER.debug("Finding all userlogins");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public UserLogin findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding userlogin by id: {}" , id);
        UserLogin userlogin=this.wmGenericDao.findById(id);
        if(userlogin==null){
            LOGGER.debug("No userlogin found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return userlogin;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public UserLogin update(UserLogin updated) throws EntityNotFoundException {
        LOGGER.debug("Updating userlogin with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


