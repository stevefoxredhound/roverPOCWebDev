/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class NclProdMessages.
 * @see com.roverpoc.rover2.NclProdMessages
 */
@Service("rover2.NclProdMessagesService")
public class NclProdMessagesServiceImpl implements NclProdMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NclProdMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rover2.NclProdMessagesDao")
    private WMGenericDao<NclProdMessages, NclProdMessagesId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<NclProdMessages, NclProdMessagesId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<NclProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public NclProdMessages create(NclProdMessages nclprodmessages) {
        LOGGER.debug("Creating a new nclprodmessages with information: {}" , nclprodmessages);
        return this.wmGenericDao.create(nclprodmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NclProdMessages delete(NclProdMessagesId nclprodmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting nclprodmessages with id: {}" , nclprodmessagesId);
        NclProdMessages deleted = this.wmGenericDao.findById(nclprodmessagesId);
        if (deleted == null) {
            LOGGER.debug("No nclprodmessages found with id: {}" , nclprodmessagesId);
            throw new EntityNotFoundException(String.valueOf(nclprodmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NclProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all nclprodmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NclProdMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all nclprodmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public NclProdMessages findById(NclProdMessagesId id) throws EntityNotFoundException {
        LOGGER.debug("Finding nclprodmessages by id: {}" , id);
        NclProdMessages nclprodmessages=this.wmGenericDao.findById(id);
        if(nclprodmessages==null){
            LOGGER.debug("No nclprodmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return nclprodmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NclProdMessages update(NclProdMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating nclprodmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((NclProdMessagesId)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


