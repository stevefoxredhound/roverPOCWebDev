/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class UatMessages.
 * @see com.roverpoc.rover2.UatMessages
 */

public interface UatMessagesService {
   /**
	 * Creates a new uatmessages.
	 * 
	 * @param created
	 *            The information of the created uatmessages.
	 * @return The created uatmessages.
	 */
	public UatMessages create(UatMessages created);

	/**
	 * Deletes a uatmessages.
	 * 
	 * @param uatmessagesId
	 *            The id of the deleted uatmessages.
	 * @return The deleted uatmessages.
	 * @throws EntityNotFoundException
	 *             if no uatmessages is found with the given id.
	 */
	public UatMessages delete(Integer uatmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all uatmessagess.
	 * 
	 * @return A list of uatmessagess.
	 */
	public Page<UatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<UatMessages> findAll(Pageable pageable);
	
	/**
	 * Finds uatmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted uatmessages.
	 * @return The found uatmessages. If no uatmessages is found, this method returns
	 *         null.
	 */
	public UatMessages findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a uatmessages.
	 * 
	 * @param updated
	 *            The information of the updated uatmessages.
	 * @return The updated uatmessages.
	 * @throws EntityNotFoundException
	 *             if no uatmessages is found with given id.
	 */
	public UatMessages update(UatMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the uatmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the uatmessages.
	 */

	public long countAll();


    public Page<UatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

