/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class NclProdMessages1m.
 * @see com.roverpoc.rover2.NclProdMessages1m
 */
@Service("rover2.NclProdMessages1mService")
public class NclProdMessages1mServiceImpl implements NclProdMessages1mService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NclProdMessages1mServiceImpl.class);

    @Autowired
    @Qualifier("rover2.NclProdMessages1mDao")
    private WMGenericDao<NclProdMessages1m, NclProdMessages1mId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<NclProdMessages1m, NclProdMessages1mId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<NclProdMessages1m> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public NclProdMessages1m create(NclProdMessages1m nclprodmessages1m) {
        LOGGER.debug("Creating a new nclprodmessages1m with information: {}" , nclprodmessages1m);
        return this.wmGenericDao.create(nclprodmessages1m);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NclProdMessages1m delete(NclProdMessages1mId nclprodmessages1mId) throws EntityNotFoundException {
        LOGGER.debug("Deleting nclprodmessages1m with id: {}" , nclprodmessages1mId);
        NclProdMessages1m deleted = this.wmGenericDao.findById(nclprodmessages1mId);
        if (deleted == null) {
            LOGGER.debug("No nclprodmessages1m found with id: {}" , nclprodmessages1mId);
            throw new EntityNotFoundException(String.valueOf(nclprodmessages1mId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NclProdMessages1m> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all nclprodmessages1ms");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NclProdMessages1m> findAll(Pageable pageable) {
        LOGGER.debug("Finding all nclprodmessages1ms");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public NclProdMessages1m findById(NclProdMessages1mId id) throws EntityNotFoundException {
        LOGGER.debug("Finding nclprodmessages1m by id: {}" , id);
        NclProdMessages1m nclprodmessages1m=this.wmGenericDao.findById(id);
        if(nclprodmessages1m==null){
            LOGGER.debug("No nclprodmessages1m found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return nclprodmessages1m;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NclProdMessages1m update(NclProdMessages1m updated) throws EntityNotFoundException {
        LOGGER.debug("Updating nclprodmessages1m with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((NclProdMessages1mId)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


