/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class NclProdMessages.
 * @see com.roverpoc.rover2.NclProdMessages
 */

public interface NclProdMessagesService {
   /**
	 * Creates a new nclprodmessages.
	 * 
	 * @param created
	 *            The information of the created nclprodmessages.
	 * @return The created nclprodmessages.
	 */
	public NclProdMessages create(NclProdMessages created);

	/**
	 * Deletes a nclprodmessages.
	 * 
	 * @param nclprodmessagesId
	 *            The id of the deleted nclprodmessages.
	 * @return The deleted nclprodmessages.
	 * @throws EntityNotFoundException
	 *             if no nclprodmessages is found with the given id.
	 */
	public NclProdMessages delete(NclProdMessagesId nclprodmessagesId) throws EntityNotFoundException;

	/**
	 * Finds all nclprodmessagess.
	 * 
	 * @return A list of nclprodmessagess.
	 */
	public Page<NclProdMessages> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NclProdMessages> findAll(Pageable pageable);
	
	/**
	 * Finds nclprodmessages by id.
	 * 
	 * @param id
	 *            The id of the wanted nclprodmessages.
	 * @return The found nclprodmessages. If no nclprodmessages is found, this method returns
	 *         null.
	 */
	public NclProdMessages findById(NclProdMessagesId id) throws EntityNotFoundException;
	/**
	 * Updates the information of a nclprodmessages.
	 * 
	 * @param updated
	 *            The information of the updated nclprodmessages.
	 * @return The updated nclprodmessages.
	 * @throws EntityNotFoundException
	 *             if no nclprodmessages is found with given id.
	 */
	public NclProdMessages update(NclProdMessages updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the nclprodmessagess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the nclprodmessages.
	 */

	public long countAll();


    public Page<NclProdMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

