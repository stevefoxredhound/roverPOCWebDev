/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class NclUatMessages1m.
 * @see com.roverpoc.rover2.NclUatMessages1m
 */

public interface NclUatMessages1mService {
   /**
	 * Creates a new ncluatmessages1m.
	 * 
	 * @param created
	 *            The information of the created ncluatmessages1m.
	 * @return The created ncluatmessages1m.
	 */
	public NclUatMessages1m create(NclUatMessages1m created);

	/**
	 * Deletes a ncluatmessages1m.
	 * 
	 * @param ncluatmessages1mId
	 *            The id of the deleted ncluatmessages1m.
	 * @return The deleted ncluatmessages1m.
	 * @throws EntityNotFoundException
	 *             if no ncluatmessages1m is found with the given id.
	 */
	public NclUatMessages1m delete(NclUatMessages1mId ncluatmessages1mId) throws EntityNotFoundException;

	/**
	 * Finds all ncluatmessages1ms.
	 * 
	 * @return A list of ncluatmessages1ms.
	 */
	public Page<NclUatMessages1m> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NclUatMessages1m> findAll(Pageable pageable);
	
	/**
	 * Finds ncluatmessages1m by id.
	 * 
	 * @param id
	 *            The id of the wanted ncluatmessages1m.
	 * @return The found ncluatmessages1m. If no ncluatmessages1m is found, this method returns
	 *         null.
	 */
	public NclUatMessages1m findById(NclUatMessages1mId id) throws EntityNotFoundException;
	/**
	 * Updates the information of a ncluatmessages1m.
	 * 
	 * @param updated
	 *            The information of the updated ncluatmessages1m.
	 * @return The updated ncluatmessages1m.
	 * @throws EntityNotFoundException
	 *             if no ncluatmessages1m is found with given id.
	 */
	public NclUatMessages1m update(NclUatMessages1m updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the ncluatmessages1ms in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the ncluatmessages1m.
	 */

	public long countAll();


    public Page<NclUatMessages1m> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

