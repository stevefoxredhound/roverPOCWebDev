/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class CategorisationRules.
 * @see com.roverpoc.rover2.CategorisationRules
 */
@Service("rover2.CategorisationRulesService")
public class CategorisationRulesServiceImpl implements CategorisationRulesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CategorisationRulesServiceImpl.class);

    @Autowired
    @Qualifier("rover2.CategorisationRulesDao")
    private WMGenericDao<CategorisationRules, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<CategorisationRules, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<CategorisationRules> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public CategorisationRules create(CategorisationRules categorisationrules) {
        LOGGER.debug("Creating a new categorisationrules with information: {}" , categorisationrules);
        return this.wmGenericDao.create(categorisationrules);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public CategorisationRules delete(Integer categorisationrulesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting categorisationrules with id: {}" , categorisationrulesId);
        CategorisationRules deleted = this.wmGenericDao.findById(categorisationrulesId);
        if (deleted == null) {
            LOGGER.debug("No categorisationrules found with id: {}" , categorisationrulesId);
            throw new EntityNotFoundException(String.valueOf(categorisationrulesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<CategorisationRules> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all categorisationruless");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<CategorisationRules> findAll(Pageable pageable) {
        LOGGER.debug("Finding all categorisationruless");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public CategorisationRules findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding categorisationrules by id: {}" , id);
        CategorisationRules categorisationrules=this.wmGenericDao.findById(id);
        if(categorisationrules==null){
            LOGGER.debug("No categorisationrules found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return categorisationrules;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public CategorisationRules update(CategorisationRules updated) throws EntityNotFoundException {
        LOGGER.debug("Updating categorisationrules with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


