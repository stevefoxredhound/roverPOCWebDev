/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class NclProdMessages1m.
 * @see com.roverpoc.rover2.NclProdMessages1m
 */

public interface NclProdMessages1mService {
   /**
	 * Creates a new nclprodmessages1m.
	 * 
	 * @param created
	 *            The information of the created nclprodmessages1m.
	 * @return The created nclprodmessages1m.
	 */
	public NclProdMessages1m create(NclProdMessages1m created);

	/**
	 * Deletes a nclprodmessages1m.
	 * 
	 * @param nclprodmessages1mId
	 *            The id of the deleted nclprodmessages1m.
	 * @return The deleted nclprodmessages1m.
	 * @throws EntityNotFoundException
	 *             if no nclprodmessages1m is found with the given id.
	 */
	public NclProdMessages1m delete(NclProdMessages1mId nclprodmessages1mId) throws EntityNotFoundException;

	/**
	 * Finds all nclprodmessages1ms.
	 * 
	 * @return A list of nclprodmessages1ms.
	 */
	public Page<NclProdMessages1m> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<NclProdMessages1m> findAll(Pageable pageable);
	
	/**
	 * Finds nclprodmessages1m by id.
	 * 
	 * @param id
	 *            The id of the wanted nclprodmessages1m.
	 * @return The found nclprodmessages1m. If no nclprodmessages1m is found, this method returns
	 *         null.
	 */
	public NclProdMessages1m findById(NclProdMessages1mId id) throws EntityNotFoundException;
	/**
	 * Updates the information of a nclprodmessages1m.
	 * 
	 * @param updated
	 *            The information of the updated nclprodmessages1m.
	 * @return The updated nclprodmessages1m.
	 * @throws EntityNotFoundException
	 *             if no nclprodmessages1m is found with given id.
	 */
	public NclProdMessages1m update(NclProdMessages1m updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the nclprodmessages1ms in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the nclprodmessages1m.
	 */

	public long countAll();


    public Page<NclProdMessages1m> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

