/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class CoreSystems.
 * @see com.roverpoc.rover2.CoreSystems
 */
@Service("rover2.CoreSystemsService")
public class CoreSystemsServiceImpl implements CoreSystemsService {


    private static final Logger LOGGER = LoggerFactory.getLogger(CoreSystemsServiceImpl.class);

    @Autowired
    @Qualifier("rover2.CoreSystemsDao")
    private WMGenericDao<CoreSystems, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<CoreSystems, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<CoreSystems> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public CoreSystems create(CoreSystems coresystems) {
        LOGGER.debug("Creating a new coresystems with information: {}" , coresystems);
        return this.wmGenericDao.create(coresystems);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public CoreSystems delete(Integer coresystemsId) throws EntityNotFoundException {
        LOGGER.debug("Deleting coresystems with id: {}" , coresystemsId);
        CoreSystems deleted = this.wmGenericDao.findById(coresystemsId);
        if (deleted == null) {
            LOGGER.debug("No coresystems found with id: {}" , coresystemsId);
            throw new EntityNotFoundException(String.valueOf(coresystemsId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<CoreSystems> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all coresystemss");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<CoreSystems> findAll(Pageable pageable) {
        LOGGER.debug("Finding all coresystemss");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public CoreSystems findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding coresystems by id: {}" , id);
        CoreSystems coresystems=this.wmGenericDao.findById(id);
        if(coresystems==null){
            LOGGER.debug("No coresystems found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return coresystems;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public CoreSystems update(CoreSystems updated) throws EntityNotFoundException {
        LOGGER.debug("Updating coresystems with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


