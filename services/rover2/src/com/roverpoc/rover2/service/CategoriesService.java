/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class Categories.
 * @see com.roverpoc.rover2.Categories
 */

public interface CategoriesService {
   /**
	 * Creates a new categories.
	 * 
	 * @param created
	 *            The information of the created categories.
	 * @return The created categories.
	 */
	public Categories create(Categories created);

	/**
	 * Deletes a categories.
	 * 
	 * @param categoriesId
	 *            The id of the deleted categories.
	 * @return The deleted categories.
	 * @throws EntityNotFoundException
	 *             if no categories is found with the given id.
	 */
	public Categories delete(Integer categoriesId) throws EntityNotFoundException;

	/**
	 * Finds all categoriess.
	 * 
	 * @return A list of categoriess.
	 */
	public Page<Categories> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<Categories> findAll(Pageable pageable);
	
	/**
	 * Finds categories by id.
	 * 
	 * @param id
	 *            The id of the wanted categories.
	 * @return The found categories. If no categories is found, this method returns
	 *         null.
	 */
	public Categories findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a categories.
	 * 
	 * @param updated
	 *            The information of the updated categories.
	 * @return The updated categories.
	 * @throws EntityNotFoundException
	 *             if no categories is found with given id.
	 */
	public Categories update(Categories updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the categoriess in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the categories.
	 */

	public long countAll();


    public Page<Categories> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

