/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class NclUatMessages.
 * @see com.roverpoc.rover2.NclUatMessages
 */
@Service("rover2.NclUatMessagesService")
public class NclUatMessagesServiceImpl implements NclUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NclUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rover2.NclUatMessagesDao")
    private WMGenericDao<NclUatMessages, NclUatMessagesId> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<NclUatMessages, NclUatMessagesId> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<NclUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public NclUatMessages create(NclUatMessages ncluatmessages) {
        LOGGER.debug("Creating a new ncluatmessages with information: {}" , ncluatmessages);
        return this.wmGenericDao.create(ncluatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NclUatMessages delete(NclUatMessagesId ncluatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ncluatmessages with id: {}" , ncluatmessagesId);
        NclUatMessages deleted = this.wmGenericDao.findById(ncluatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No ncluatmessages found with id: {}" , ncluatmessagesId);
            throw new EntityNotFoundException(String.valueOf(ncluatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NclUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ncluatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NclUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all ncluatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public NclUatMessages findById(NclUatMessagesId id) throws EntityNotFoundException {
        LOGGER.debug("Finding ncluatmessages by id: {}" , id);
        NclUatMessages ncluatmessages=this.wmGenericDao.findById(id);
        if(ncluatmessages==null){
            LOGGER.debug("No ncluatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return ncluatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NclUatMessages update(NclUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating ncluatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((NclUatMessagesId)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


