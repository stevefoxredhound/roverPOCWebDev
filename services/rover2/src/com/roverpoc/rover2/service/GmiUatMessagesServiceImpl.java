/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class GmiUatMessages.
 * @see com.roverpoc.rover2.GmiUatMessages
 */
@Service("rover2.GmiUatMessagesService")
public class GmiUatMessagesServiceImpl implements GmiUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(GmiUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rover2.GmiUatMessagesDao")
    private WMGenericDao<GmiUatMessages, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<GmiUatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<GmiUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public GmiUatMessages create(GmiUatMessages gmiuatmessages) {
        LOGGER.debug("Creating a new gmiuatmessages with information: {}" , gmiuatmessages);
        return this.wmGenericDao.create(gmiuatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public GmiUatMessages delete(Integer gmiuatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting gmiuatmessages with id: {}" , gmiuatmessagesId);
        GmiUatMessages deleted = this.wmGenericDao.findById(gmiuatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No gmiuatmessages found with id: {}" , gmiuatmessagesId);
            throw new EntityNotFoundException(String.valueOf(gmiuatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<GmiUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all gmiuatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<GmiUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all gmiuatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public GmiUatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding gmiuatmessages by id: {}" , id);
        GmiUatMessages gmiuatmessages=this.wmGenericDao.findById(id);
        if(gmiuatmessages==null){
            LOGGER.debug("No gmiuatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return gmiuatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public GmiUatMessages update(GmiUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating gmiuatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


