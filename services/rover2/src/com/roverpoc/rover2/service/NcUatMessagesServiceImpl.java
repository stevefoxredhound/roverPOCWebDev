/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;

import com.wavemaker.runtime.data.dao.*;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;


/**
 * ServiceImpl object for domain model class NcUatMessages.
 * @see com.roverpoc.rover2.NcUatMessages
 */
@Service("rover2.NcUatMessagesService")
public class NcUatMessagesServiceImpl implements NcUatMessagesService {


    private static final Logger LOGGER = LoggerFactory.getLogger(NcUatMessagesServiceImpl.class);

    @Autowired
    @Qualifier("rover2.NcUatMessagesDao")
    private WMGenericDao<NcUatMessages, Integer> wmGenericDao;
    public void setWMGenericDao(WMGenericDao<NcUatMessages, Integer> wmGenericDao){
        this.wmGenericDao = wmGenericDao;
    }
     @Transactional(readOnly = true, value = "rover2TransactionManager")
     public Page<NcUatMessages> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable){
          LOGGER.debug("Fetching all associated");
          return this.wmGenericDao.getAssociatedObjects(value, entityName, key, pageable);
     }

    @Transactional(value = "rover2TransactionManager")
    @Override
    public NcUatMessages create(NcUatMessages ncuatmessages) {
        LOGGER.debug("Creating a new ncuatmessages with information: {}" , ncuatmessages);
        return this.wmGenericDao.create(ncuatmessages);
    }

    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NcUatMessages delete(Integer ncuatmessagesId) throws EntityNotFoundException {
        LOGGER.debug("Deleting ncuatmessages with id: {}" , ncuatmessagesId);
        NcUatMessages deleted = this.wmGenericDao.findById(ncuatmessagesId);
        if (deleted == null) {
            LOGGER.debug("No ncuatmessages found with id: {}" , ncuatmessagesId);
            throw new EntityNotFoundException(String.valueOf(ncuatmessagesId));
        }
        this.wmGenericDao.delete(deleted);
        return deleted;
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NcUatMessages> findAll(QueryFilter[] queryFilters, Pageable pageable) {
        LOGGER.debug("Finding all ncuatmessagess");
        return this.wmGenericDao.search(queryFilters, pageable);
    }
    
    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public Page<NcUatMessages> findAll(Pageable pageable) {
        LOGGER.debug("Finding all ncuatmessagess");
        return this.wmGenericDao.search(null, pageable);
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public NcUatMessages findById(Integer id) throws EntityNotFoundException {
        LOGGER.debug("Finding ncuatmessages by id: {}" , id);
        NcUatMessages ncuatmessages=this.wmGenericDao.findById(id);
        if(ncuatmessages==null){
            LOGGER.debug("No ncuatmessages found with id: {}" , id);
            throw new EntityNotFoundException(String.valueOf(id));
        }
        return ncuatmessages;
    }
    @Transactional(rollbackFor = EntityNotFoundException.class, value = "rover2TransactionManager")
    @Override
    public NcUatMessages update(NcUatMessages updated) throws EntityNotFoundException {
        LOGGER.debug("Updating ncuatmessages with information: {}" , updated);
        this.wmGenericDao.update(updated);
        return this.wmGenericDao.findById((Integer)updated.getId());
    }

    @Transactional(readOnly = true, value = "rover2TransactionManager")
    @Override
    public long countAll() {
        return this.wmGenericDao.count();
    }
}


