/*Copyright (c) 2015-2016 redhound.net All Rights Reserved.
 This software is the confidential and proprietary information of redhound.net You shall not disclose such Confidential Information and shall use it only in accordance
 with the terms of the source code license agreement you entered into with redhound.net*/

package com.roverpoc.rover2.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/




import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.data.exception.EntityNotFoundException;

import com.roverpoc.rover2.*;

/**
 * Service object for domain model class ComparisonRules.
 * @see com.roverpoc.rover2.ComparisonRules
 */

public interface ComparisonRulesService {
   /**
	 * Creates a new comparisonrules.
	 * 
	 * @param created
	 *            The information of the created comparisonrules.
	 * @return The created comparisonrules.
	 */
	public ComparisonRules create(ComparisonRules created);

	/**
	 * Deletes a comparisonrules.
	 * 
	 * @param comparisonrulesId
	 *            The id of the deleted comparisonrules.
	 * @return The deleted comparisonrules.
	 * @throws EntityNotFoundException
	 *             if no comparisonrules is found with the given id.
	 */
	public ComparisonRules delete(Integer comparisonrulesId) throws EntityNotFoundException;

	/**
	 * Finds all comparisonruless.
	 * 
	 * @return A list of comparisonruless.
	 */
	public Page<ComparisonRules> findAll(QueryFilter[] queryFilters, Pageable pageable);
	
	public Page<ComparisonRules> findAll(Pageable pageable);
	
	/**
	 * Finds comparisonrules by id.
	 * 
	 * @param id
	 *            The id of the wanted comparisonrules.
	 * @return The found comparisonrules. If no comparisonrules is found, this method returns
	 *         null.
	 */
	public ComparisonRules findById(Integer id) throws EntityNotFoundException;
	/**
	 * Updates the information of a comparisonrules.
	 * 
	 * @param updated
	 *            The information of the updated comparisonrules.
	 * @return The updated comparisonrules.
	 * @throws EntityNotFoundException
	 *             if no comparisonrules is found with given id.
	 */
	public ComparisonRules update(ComparisonRules updated) throws EntityNotFoundException;

	/**
	 * Retrieve the total count of the comparisonruless in the repository.
	 * 
	 * @param None
	 *            .
	 * @return The count of the comparisonrules.
	 */

	public long countAll();


    public Page<ComparisonRules> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);


}

