{"name":"rover2","description":"Procedure for rover2","procedures":[{"name":"procNumberOfRecordsInUAT","procedure":"DECLARE @core_uat_table VARCHAR(max)\r\nDECLARE @sql_command VARCHAR(max)\r\nDECLARE @sql_delim VARCHAR(max)\r\n\r\nDECLARE db_cursor_core_systems CURSOR FOR  \r\nSELECT core_uat_table\r\n  FROM core_systems\r\n WHERE UPPER(core_system_status) = 'On'\r\n order by core_system\r\n\r\nSET @sql_command = ''\r\nSET @sql_delim = ''\r\n\r\nOPEN db_cursor_core_systems   \r\n   \r\n    FETCH NEXT FROM db_cursor_core_systems INTO @core_uat_table\r\n\r\n    SET @sql_command = @sql_command + ' Select '\r\n\r\n     WHILE @@FETCH_STATUS = 0   \r\n     BEGIN   \r\n     \r\n       SET @sql_command = @sql_command + @sql_delim\r\n              \r\n       SET @sql_command = @sql_command + '(Select COUNT(*) from ' + @core_uat_table + ')'\r\n          \r\n  \t   SET @sql_delim = ' + '\r\n\r\n     FETCH NEXT FROM db_cursor_core_systems INTO @core_uat_table\r\n   end\r\n   \r\nCLOSE db_cursor_core_systems   \r\nDEALLOCATE db_cursor_core_systems\r\n     \r\nexec (@sql_command)","comment":"Number of Records in UAT across all systems","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":null},{"name":"procCombinedSetTheory","procedure":"DECLARE @core_system VARCHAR(max)\nDECLARE @core_prod_table VARCHAR(max)\nDECLARE @core_uat_table VARCHAR(max)\nDECLARE @sql_command VARCHAR(max)\nDECLARE @sql_union VARCHAR(max)\n\nDECLARE db_cursor_core_systems CURSOR FOR  \nSELECT core_system\n      ,core_prod_table\n      ,core_uat_table\n  FROM core_systems\n WHERE UPPER(core_system_status) = 'On'\n order by core_system\n\nSET @sql_command = ''\nSET @sql_union = ''\n\nOPEN db_cursor_core_systems   \n   \n    FETCH NEXT FROM db_cursor_core_systems INTO @core_system, @core_prod_table, @core_uat_table\n\n     WHILE @@FETCH_STATUS = 0   \n     BEGIN   \n     \n       SET @sql_command = @sql_command + @sql_union\n       \n       SET @sql_command = @sql_command + ' Select '\n       \n       SET @sql_command = @sql_command + char(39) + @core_system + char(39) + ' as System'\n       \n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\n\t   SET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\n       SET @sql_command = @sql_command + '   where prod.core_system = ' + char(39) + @core_system + char(39) + ') as PROD'\n       \n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\n       SET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\n\t   SET @sql_command = @sql_command + '   where prod.core_system = ' + char(39) + @core_system + char(39)\n\t   SET @sql_command = @sql_command + '     and not exists (select 1 from ' + @core_uat_table + ' uat  '\n       SET @sql_command = @sql_command + '\t                            where uat.core_system = prod.core_system '\n\t   SET @sql_command = @sql_command + '       \t                      and uat.core_key    = prod.core_key)) as PROD_ONLY'\n       \n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\n       SET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\n       SET @sql_command = @sql_command + '   inner join ' + @core_uat_table + ' uat on uat.core_system = prod.core_system '\n       SET @sql_command = @sql_command + '         and uat.core_key    = prod.core_key '\n       SET @sql_command = @sql_command + '      where prod.core_system = ' + char(39) + @core_system + char(39) + ') as BOTH'\n       \n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\n       SET @sql_command = @sql_command + '    from ' + @core_uat_table + ' uat '\n       SET @sql_command = @sql_command + '   where uat.core_system = ' + char(39) + @core_system + char(39)\n       SET @sql_command = @sql_command + '     and not exists (select 1 '\n       SET @sql_command = @sql_command + '   from ' + @core_prod_table + ' prod '\n       SET @sql_command = @sql_command + '  where uat.core_system = prod.core_system '\n       SET @sql_command = @sql_command + '    and uat.core_key    = prod.core_key)) as UAT_ONLY'\n\t                        \n\t   SET @sql_command = @sql_command + ',(Select COUNT(*) '\n\t   SET @sql_command = @sql_command + '    from ' + @core_uat_table + ' uat '\n\t   SET @sql_command = @sql_command + '   where uat.core_system = ' + char(39) + @core_system + char(39) + ') as UAT'     \n          \n  \t   SET @sql_union = ' UNION '\n\n     FETCH NEXT FROM db_cursor_core_systems INTO @core_system, @core_prod_table, @core_uat_table\n   end\n   \nCLOSE db_cursor_core_systems   \nDEALLOCATE db_cursor_core_systems\n     \nexec (@sql_command)","comment":"Produces the results for set theory per system","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":null},{"name":"procNumberCountProdSingleSystem","procedure":"DECLARE @core_prod_table varchar(250)\r\nDECLARE @core_uat_table varchar(250)\r\nDECLARE @sql_command varchar(250)\r\n\r\nSELECT @core_prod_table = core_prod_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'On'\r\n                          AND core_system = :p1\t\t\t\t-- This will be the parameter from wavemaker\r\n                          \r\nSELECT @core_uat_table = core_uat_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'On'\r\n                          AND core_system = :p2                    --This will be the parameter from wavemaker                          \r\n\r\nSET @sql_command = ' Select COUNT(*) '\r\nSET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\nSET @sql_command = @sql_command + '   where not exists (select 1 from ' + @core_uat_table + ' uat  '\r\nSET @sql_command = @sql_command + '\t                            where uat.core_system = prod.core_system '\r\nSET @sql_command = @sql_command + '       \t                      and uat.core_key    = prod.core_key)) as PROD_ONLY'\r\n\r\n--select @sql_command\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false},{"paramName":"p2","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procNumberCountProdSingleSystemrtnType"},{"name":"procNumberCountUATSingleSystem","procedure":"DECLARE @core_uat_table varchar(250)\r\nDECLARE @sql_command varchar(250)\r\n\r\nSELECT @core_uat_table = core_uat_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'On'\r\n                          AND core_system = :p3\t\t\t\t\t\t-- This will be the parameter from wavemaker\r\n \r\nset @sql_command = 'SELECT COUNT(*) FROM ' + @core_uat_table\r\n\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p3","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procVenMain","procedure":"DECLARE @core_system VARCHAR(max)\r\nDECLARE @core_prod_table VARCHAR(max)\r\nDECLARE @core_uat_table VARCHAR(max)\r\nDECLARE @sql_command VARCHAR(max)\r\nDECLARE @sql_union VARCHAR(max)\r\n\r\nDECLARE db_cursor_core_systems CURSOR FOR  \r\nSELECT core_system\r\n      ,core_prod_table\r\n      ,core_uat_table\r\n  FROM core_systems\r\n WHERE UPPER(core_system_status) = 'On'\r\n order by core_system\r\n\r\nSET @sql_command = ''\r\nSET @sql_union = ''\r\n\r\nOPEN db_cursor_core_systems   \r\n   \r\n    FETCH NEXT FROM db_cursor_core_systems INTO @core_system, @core_prod_table, @core_uat_table\r\n\r\n     WHILE @@FETCH_STATUS = 0   \r\n     BEGIN   \r\n     \r\n       SET @sql_command = @sql_command + @sql_union\r\n       \r\n       SET @sql_command = @sql_command + ' Select '\r\n       \r\n       SET @sql_command = @sql_command + char(39) + @core_system + char(39) + ' as System'\r\n       \r\n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\r\n    SET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\n       SET @sql_command = @sql_command + '   where prod.core_system = ' + char(39) + @core_system + char(39) + ') as PROD'\r\n       \r\n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\r\n       SET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\n    SET @sql_command = @sql_command + '   where prod.core_system = ' + char(39) + @core_system + char(39)\r\n    SET @sql_command = @sql_command + '     and not exists (select 1 from ' + @core_uat_table + ' uat  '\r\n       SET @sql_command = @sql_command + '                             where uat.core_system = prod.core_system '\r\n    SET @sql_command = @sql_command + '                              and uat.core_key    = prod.core_key)) as PROD_ONLY'\r\n       \r\n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\r\n       SET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\n       SET @sql_command = @sql_command + '   inner join ' + @core_uat_table + ' uat on uat.core_system = prod.core_system '\r\n       SET @sql_command = @sql_command + '         and uat.core_key    = prod.core_key '\r\n       SET @sql_command = @sql_command + '      where prod.core_system = ' + char(39) + @core_system + char(39) + ') as BOTH'\r\n       \r\n       SET @sql_command = @sql_command + ',(Select COUNT(*) '\r\n       SET @sql_command = @sql_command + '    from ' + @core_uat_table + ' uat '\r\n       SET @sql_command = @sql_command + '   where uat.core_system = ' + char(39) + @core_system + char(39)\r\n       SET @sql_command = @sql_command + '     and not exists (select 1 '\r\n       SET @sql_command = @sql_command + '   from ' + @core_prod_table + ' prod '\r\n       SET @sql_command = @sql_command + '  where uat.core_system = prod.core_system '\r\n       SET @sql_command = @sql_command + '    and uat.core_key    = prod.core_key)) as UAT_ONLY'\r\n                         \r\n    SET @sql_command = @sql_command + ',(Select COUNT(*) '\r\n    SET @sql_command = @sql_command + '    from ' + @core_uat_table + ' uat '\r\n    SET @sql_command = @sql_command + '   where uat.core_system = ' + char(39) + @core_system + char(39) + ') as UAT'     \r\n          \r\n      SET @sql_union = ' UNION '\r\n\r\n     FETCH NEXT FROM db_cursor_core_systems INTO @core_system, @core_prod_table, @core_uat_table\r\n   end\r\n   \r\nCLOSE db_cursor_core_systems   \r\nDEALLOCATE db_cursor_core_systems\r\n     \r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":null},{"name":"procNumberCountBothSingleSystem","procedure":"DECLARE @core_prod_table varchar(250)\r\nDECLARE @core_uat_table varchar(250)\r\nDECLARE @sql_command varchar(250)\r\n\r\nSELECT @core_prod_table = core_prod_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'On'\r\n                          AND core_system = :p1\t\t\t\t\t-- This will be the parameter from wavemaker\r\n                          \r\nSELECT @core_uat_table = core_uat_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'On'\r\n                          AND core_system = :p2\t\t\t\t\t-- This will be the parameter from wavemaker                          \r\n\r\nSET @sql_command = ' Select COUNT(*) '\r\nSET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\nSET @sql_command = @sql_command + '   inner join ' + @core_uat_table + ' uat on uat.core_system = prod.core_system '\r\nSET @sql_command = @sql_command + '         and uat.core_key    = prod.core_key '\r\n      \r\n\r\n--select @sql_command\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false},{"paramName":"p2","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procGraphACatByNumDifferences","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1 \r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' select tbl_cats.category, count(*) as Messages '\r\nSET @sql_command = @sql_command + '  from categories tbl_cats '\r\nSET @sql_command = @sql_command + '  left join categorisation_rules tbl_rules on tbl_rules.category = tbl_cats.id '\r\nSET @sql_command = @sql_command + '  left join classifications      tbl_class on tbl_class.name     = tbl_rules.classification_name '\r\nSET @sql_command = @sql_command + '  left join results              tbl_resul on tbl_resul.compid   = tbl_class.compid '\r\nSET @sql_command = @sql_command + ' where tbl_resul.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and tbl_resul.compid is not null '\r\nSET @sql_command = @sql_command + ' group by tbl_cats.category '\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procGraphACatByNumDifferencesrtnType"},{"name":"procGraphBCatByNumClassifications","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' select tbl_cats.category, count(*) as Messages'\r\nSET @sql_command = @sql_command + '  from categories tbl_cats '\r\nSET @sql_command = @sql_command + '  left join categorisation_rules tbl_rules on tbl_rules.category = tbl_cats.id '\r\nSET @sql_command = @sql_command + '  left join classifications      tbl_class on tbl_class.name     = tbl_rules.classification_name '\r\nSET @sql_command = @sql_command + ' where tbl_class.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + ' group by tbl_cats.category '\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procGNumDiffThisSysSysDetails","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*) as ''Number of Differences'''\r\nSET @sql_command = @sql_command + ' FROM results '\r\nSET @sql_command = @sql_command + ' WHERE compid <> REPLICATE(''0'',len(compid))'\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procGNumDiffThisSysSysDetailsrtnType"},{"name":"procFNoDifferencesSysDetails","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :P1\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*) as ''No Differences'''\r\nSET @sql_command = @sql_command + ' FROM results '\r\nSET @sql_command = @sql_command + ' WHERE compid = REPLICATE(''0'',len(compid))'\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"P1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procFNoDifferencesSysDetailsrtnType"},{"name":"procINumCatDiffSysDetails","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\t\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*)  as ''Number of Categorised Differences'''\r\nSET @sql_command = @sql_command + '  FROM results '\r\nSET @sql_command = @sql_command + '  inner join classifications tbl_class on tbl_class.compid = results.compid'\r\nSET @sql_command = @sql_command + '  WHERE results.compid <> REPLICATE(''0'',len(results.compid)) '\r\nSET @sql_command = @sql_command + '  and results.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and exists (select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = tbl_class.name)'\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procINumCatDiffSysDetailsrtnType"},{"name":"procJNumOfClassificationSysDet","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\t\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*) as ''Total Number of Classification'''\r\nSET @sql_command = @sql_command + '  FROM classifications '\r\nSET @sql_command = @sql_command + '  WHERE compid <> REPLICATE(''0'',len(compid)) '\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procJNumOfClassificationSysDetrtnType"},{"name":"procKNumUncatClassSysDet","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\t\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*) as ''Total Number of Uncategorised Classifications'''\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  WHERE compid <> REPLICATE(''0'',len(compid)) '\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '  and not exists (select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = tbl_class.name)'  \r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procKNumUncatClassSysDetrtnType"},{"name":"procLNumCatClassSysDet","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\t\t\t\t\t\t\t\t\t\t\t\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*) as ''Total Number of categorised Classifications'''\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  WHERE compid <> REPLICATE(''0'',len(compid)) '\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '  and exists (select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = tbl_class.name)'  \r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procLNumCatClassSysDetrtnType"},{"name":"procHNumUnclassDiffThisSysSysDet","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*) as ''Number of Unctegorised Differences'''\r\nSET @sql_command = @sql_command + '  FROM results '\r\nSET @sql_command = @sql_command + '  inner join classifications tbl_class on tbl_class.compid = results.compid'\r\nSET @sql_command = @sql_command + '  WHERE results.compid <> REPLICATE(''0'',len(results.compid)) '\r\nSET @sql_command = @sql_command + '  and results.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and not exists (select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = tbl_class.name)'\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procHNumUnclassDiffThisSysSysDetrtnType"},{"name":"procNumberOfMessagesPRODONLYForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @core_prod_table varchar(max)\r\nDECLARE @core_uat_table varchar(max)\r\nDECLARE @sql_command varchar(max)\r\n\r\nSELECT @core_prod_table = core_prod_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'ON'\r\n                          AND core_system = @core_system\r\n                          \r\nSELECT @core_uat_table = core_uat_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'ON'\r\n                          AND core_system = @core_system\r\n\r\nSET @sql_command = ' Select COUNT(*)'\r\nSET @sql_command = @sql_command + '  as ''PROD ONLY'''\r\nSET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\nSET @sql_command = @sql_command + '   where not exists (select 1 from ' + @core_uat_table + ' uat  '\r\nSET @sql_command = @sql_command + '\t                            where uat.core_system = prod.core_system '\r\nSET @sql_command = @sql_command + '       \t                      and uat.core_key    = prod.core_key)'\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procNumberOfMessagesPRODONLYForThisSystemrtnType"},{"name":"procENumberOfMessagesUATONLYForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @core_prod_table varchar(max)\r\nDECLARE @core_uat_table varchar(max)\r\nDECLARE @sql_command varchar(max)\r\n\r\nSELECT @core_prod_table = core_prod_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'ON'\r\n                          AND core_system = @core_system \r\n                          \r\nSELECT @core_uat_table = core_uat_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'ON'\r\n                          AND core_system = @core_system \r\n\r\nSET @sql_command = ' Select COUNT(*) '\r\nSET @sql_command = @sql_command + '  as ''UAT Only'''\r\nSET @sql_command = @sql_command + '    from ' + @core_uat_table + ' uat '\r\nSET @sql_command = @sql_command + '   where not exists (select 1 from ' + @core_prod_table + ' prod  '\r\nSET @sql_command = @sql_command + '\t                            where uat.core_system = prod.core_system '\r\nSET @sql_command = @sql_command + '       \t                      and uat.core_key    = prod.core_key)'\r\n\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procENumberOfMessagesUATONLYForThisSystemrtnType"},{"name":"procDNumberOfMessagesBOTHForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @core_prod_table varchar(max)\r\nDECLARE @core_uat_table varchar(max)\r\nDECLARE @sql_command varchar(max)\r\n\r\nSELECT @core_prod_table = core_prod_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'ON'\r\n                          AND core_system = @core_system\r\n                          \r\nSELECT @core_uat_table = core_uat_table\r\n                         FROM core_systems\r\n                        WHERE UPPER(core_system_status) = 'ON'\r\n                          AND core_system = @core_system\r\n\r\nSET @sql_command = ' Select COUNT(*) '\r\nSET @sql_command = @sql_command + '  as ''Both'''\r\nSET @sql_command = @sql_command + '    from ' + @core_prod_table + ' prod '\r\nSET @sql_command = @sql_command + '   inner join ' + @core_uat_table + ' uat on uat.core_system = prod.core_system '\r\nSET @sql_command = @sql_command + '         and uat.core_key    = prod.core_key '\r\n      \r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"QueryAClassificationsListForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT tbl_class.name as ''Classification'', count(*) as ''Messages'' '\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  left join results tbl_resul on tbl_resul.compid = tbl_class.compid '\r\nSET @sql_command = @sql_command + ' WHERE tbl_resul.compid <> REPLICATE(''0'',len(tbl_resul.compid))'\r\nSET @sql_command = @sql_command + '   and tbl_resul.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and not exists (SELECT 1 FROM categorisation_rules tbl_cats where tbl_cats.classification_name = tbl_class.name) '\r\nSET @sql_command = @sql_command + ' group by  tbl_class.name '\r\nSET @sql_command = @sql_command + ' order by count(*) desc'\r\n\r\n \r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procVennANumberOfMessagesPRODForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\nDECLARE @core_table varchar(max)\r\nDECLARE @sql_command varchar(max)\r\n\r\nSELECT @core_table = core_prod_table\r\n  FROM core_systems\r\n WHERE UPPER(core_system_status) = 'ON'\r\n   AND core_system = @core_system\r\n\r\nSET @sql_command = 'SELECT COUNT(*) as ''NumberProdForThisSystem'' FROM ' + @core_table\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procVennANumberOfMessagesPRODForThisSystemrtnType"},{"name":"procVennBNumberOfMessagesUATForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\nDECLARE @core_table varchar(max)\r\nDECLARE @sql_command varchar(max)\r\n\r\nSELECT @core_table = core_uat_table\r\n  FROM core_systems\r\n WHERE UPPER(core_system_status) = 'ON'\r\n   AND core_system = @core_system\r\n\r\nSET @sql_command = 'SELECT COUNT(*) as ''NumberOfUATMessagesForThisSystem'' FROM ' + @core_table\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procDClassAndCatClassificationsWithCatRulessListForThisSystem","procedure":"-- -----------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- -----------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - List of classifications and number of messages with categorisation rule for this system\r\n--\r\n-- Purpose\tRetrieve the list of classifications and number of messages with categorisation rule for this system\r\n--\r\n-- Version\tV0.1 - Initial draft\r\n--\r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\n-- -----------------------------------------------------------------------------------------------------\r\nDECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT tbl_class.name as ''Classification'', count(*) as ''Messages'', tbl_catr.category as ''Category'', tbl_catr.comment as ''Comment'', tbl_catr.who as ''Who'' '\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  left join results tbl_resul on tbl_resul.compid = tbl_class.compid '\r\nSET @sql_command = @sql_command + '  left join categorisation_rules tbl_catr on tbl_catr.classification_name = tbl_class.name'\r\nSET @sql_command = @sql_command + ' WHERE tbl_resul.compid <> REPLICATE(''0'',len(tbl_resul.compid))'\r\nSET @sql_command = @sql_command + '   and tbl_resul.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and exists (SELECT 1 FROM categorisation_rules tbl_cats where tbl_cats.classification_name = tbl_class.name) '\r\nSET @sql_command = @sql_command + ' group by  tbl_class.name, tbl_catr.category, tbl_catr.comment, tbl_catr.who '\r\nSET @sql_command = @sql_command + ' order by count(*) desc'\r\n\r\n \r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procEClassCAtDeleteRule","procedure":"DELETE FROM dbo.categorisation_rules\r\nWHERE classification_name = :p1","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procAEditRuleUpdate","procedure":"update dbo.categorisation_rules\r\nset category = :pCategory\r\n, Comment = :Pcomment\r\nWHERE classification_name=:pClassificationName","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"pCategory","procedureParamType":"IN","valueType":"java.lang.String","list":false},{"paramName":"Pcomment","procedureParamType":"IN","valueType":"java.lang.String","list":false},{"paramName":"pClassificationName","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procDEditRuleVersionDisplayOnly","procedure":"-- -----------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- -----------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - List of classifications and number of messages with categorisation rule for this system\r\n--\r\n-- Purpose\tRetrieve the list of classifications and number of messages with categorisation rule for this system\r\n--\r\n-- Version\tV0.1 - Initial draft\r\n--\r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\n-- -----------------------------------------------------------------------------------------------------\r\nDECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT tbl_class.name as ''Classification'', count(*) as ''Messages'', tbl_catr.category as ''Category'', tbl_catr.comment as ''Comment'', tbl_catr.who as ''Who'' '\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  left join results tbl_resul on tbl_resul.compid = tbl_class.compid '\r\nSET @sql_command = @sql_command + '  left join categorisation_rules tbl_catr on tbl_catr.classification_name = tbl_class.name'\r\nSET @sql_command = @sql_command + ' WHERE tbl_resul.compid <> REPLICATE(''0'',len(tbl_resul.compid))'\r\nSET @sql_command = @sql_command + '   and tbl_resul.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and exists (SELECT 1 FROM categorisation_rules tbl_cats where tbl_cats.classification_name = tbl_class.name) '\r\nSET @sql_command = @sql_command + ' group by  tbl_class.name, tbl_catr.category, tbl_catr.comment, tbl_catr.who '\r\nSET @sql_command = @sql_command + ' order by count(*) desc'\r\n\r\n \r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"QueryAAMessagesforthisClassificationsWithDifferences","procedure":"-- -----------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- -----------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - Show a list of messages within a classifications with only the differing columns \r\n--\r\n-- Purpose\t\r\n--\r\n-- Version\tV0.1 - Initial draft\r\n--\r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\n\r\n-- -----------------------------------------------------------------------------------------------------\r\nDECLARE @classification_name VARCHAR(MAX)\r\nSET @classification_name = :p1\r\n \r\nDECLARE @diff_list nVARCHAR(MAX)\r\nSET @diff_list = dbo.diff_list(@classification_name)\r\n\r\nDECLARE @diff_cols VARCHAR(max) \r\nEXEC sp_executesql @diff_list, N'@diff_colsOUT varchar(max) OUTPUT', @diff_colsOUT = @diff_cols OUTPUT\r\n\r\nDECLARE @sql_command VARCHAR(max)\r\n\r\nDECLARE @core_system VARCHAR(max)\r\nSELECT @core_system = core_system FROM dbo.classifications WHERE name = @classification_name\r\n\r\nDECLARE @core_prod_table VARCHAR(max)\r\nSELECT @core_prod_table = core_prod_table FROM dbo.core_systems WHERE core_system = @core_system\r\n\r\nDECLARE @core_uat_table varchar(max)\r\nSELECT @core_uat_table = core_uat_table FROM dbo.core_systems WHERE core_system = @core_system\r\n\r\n\r\nSET @sql_command = ''\r\nSET @sql_command = @sql_command + ' declare @compid varchar(max) '\r\nSET @sql_command = @sql_command + ' select @compid = compid from dbo.classifications where name = ''' + @classification_name + '''' \r\n\r\nSET @sql_command = @sql_command + ' select  core_key '\r\nSET @sql_command = @sql_command + '        ,core_system '\r\nSET @sql_command = @sql_command + '        ,''PROD'' as core_source '\r\nSET @sql_command = @sql_command + '        ,' + @diff_cols\r\nSET @sql_command = @sql_command + '   from ' + @core_prod_table + ' tbl_prod '\r\nSET @sql_command = @sql_command + '  where exists (select 1 from dbo.results tbl_resl where tbl_resl.core_key = tbl_prod.core_key and  tbl_resl.compid = @compid) '\r\n\r\nSET @sql_command = @sql_command + ' union all '\r\n\r\nSET @sql_command = @sql_command + ' select  core_key '\r\nSET @sql_command = @sql_command + '        ,core_system '\r\nSET @sql_command = @sql_command + '        ,''UAT'' as core_source '\r\nSET @sql_command = @sql_command + '        ,' + @diff_cols\r\nSET @sql_command = @sql_command + '   from ' + @core_uat_table + ' tbl_uat '\r\nSET @sql_command = @sql_command + ' where exists (select 1 from dbo.results tbl_resl where tbl_resl.core_key = tbl_uat.core_key and  tbl_resl.compid = @compid) '\r\nSET @sql_command = @sql_command + ' order by tbl_prod.core_key, tbl_prod.core_system, core_source '\r\n  \r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"QueryAShowMessagesWithDifferencesForThisSystem","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' SELECT count(*)as ''Differences'' '\r\nSET @sql_command = @sql_command + ' FROM results '\r\nSET @sql_command = @sql_command + ' WHERE compid = REPLICATE(''0'',len(compid))'\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procMMessCovSysDet","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\t\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' declare @categorised numeric '\r\nSET @sql_command = @sql_command + ' declare @differences numeric '\r\nSET @sql_command = @sql_command + ' declare @answer decimal (10,2)'\r\n\r\n-- Number of categorised messages\r\nSET @sql_command = @sql_command + ' select @categorised = count(*) '\r\nSET @sql_command = @sql_command + '  FROM results '\r\nSET @sql_command = @sql_command + '  inner join classifications tbl_class on tbl_class.compid = results.compid'\r\nSET @sql_command = @sql_command + '  WHERE results.compid <> REPLICATE(''0'',len(results.compid)) '\r\nSET @sql_command = @sql_command + '  and results.core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '   and exists (select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = tbl_class.name)'\r\n\r\n-- Number of differences\r\nSET @sql_command = @sql_command + ' SELECT @differences = count(*) '\r\nSET @sql_command = @sql_command + ' FROM results '\r\nSET @sql_command = @sql_command + ' WHERE compid <> REPLICATE(''0'',len(compid))'\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\n\r\n-- Categorised as a Percentage of Differences\r\nSET @sql_command = @sql_command + ' set @answer = (@categorised / @differences) * 100'\r\nSET @sql_command = @sql_command + '   select cast(@answer as varchar(max)) + ''%'' as ''Number as Percentange of Dif'' '\r\n\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2procMMessCovSysDetrtnType"},{"name":"procNCatCovPerSysDet","procedure":"DECLARE @core_system varchar(max)\r\nSET @core_system = :p1\r\n\r\nDECLARE @sql_command varchar(max)\r\n\r\nSET @sql_command = ' declare @categorised numeric '\r\nSET @sql_command = @sql_command + ' declare @total_classifications numeric '\r\nSET @sql_command = @sql_command + ' declare @answer decimal (10,2)'\r\n\r\n-- Number of categorised classifications\r\nSET @sql_command = @sql_command + ' select @categorised = count(*) '\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  WHERE compid <> REPLICATE(''0'',len(compid)) '\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\nSET @sql_command = @sql_command + '  and exists (select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = tbl_class.name)'  \r\n\r\n-- Number of total classifications\r\nSET @sql_command = @sql_command + ' SELECT @total_classifications = count(*) '\r\nSET @sql_command = @sql_command + '  FROM classifications '\r\nSET @sql_command = @sql_command + '  WHERE compid <> REPLICATE(''0'',len(compid)) '\r\nSET @sql_command = @sql_command + '  and core_system = ''' + @core_system + ''''\r\n\r\n-- Categorised as a Percentage of Differences\r\nSET @sql_command = @sql_command + ' set @answer = (@categorised / @total_classifications) * 100'\r\nSET @sql_command = @sql_command + '   select cast(@answer as varchar(max)) + ''%'' as ''Number of Categorised as a Percentage'' '\r\n\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procCategorisatonEngine","procedure":"-- -----------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- -----------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - Comparison Engine\r\n--\r\n-- Purpose\tLoop through the system records and run the comparsion for each if required \r\n--\r\n-- Version  V0.3 - Added the classification naming process\r\n--\t\t\tV0.2 - Added operator tables and replace for column_name\r\n--\t\t\t\t - Added big dirty hack to reset the results table for the demo\t\r\n--\t\t\tV0.1 - Initial draft\r\n--\r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\n-- -----------------------------------------------------\r\n-- MASSIVE HACK TO CLEAR OUT THE RESULTS BEFORE RUNNING\r\n-- -----------------------------------------------------\r\ndelete from results \r\ndelete from classifications\r\ndelete from categorisation_rules\r\ndelete from logging\r\n-- -----------------------------------------------------\r\n-- MASSIVE HACK TO CLEAR OUT THE RESULTS BEFORE RUNNING\r\n-- -----------------------------------------------------\r\n\r\n-- -----------------------------------------------------------------------------------------------------\r\n-- Logging\r\n-- -----------------------------------------------------------------------------------------------------\r\ninsert into logging\r\n(process, core_system, log_details)\r\nvalues ('Comparison Engine', '', 'Started')\r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\nDECLARE @core_system VARCHAR(max)\r\nDECLARE @core_prod_table VARCHAR(max)\r\nDECLARE @core_uat_table VARCHAR(max)\r\nDECLARE @sql_command VARCHAR(max)\r\nDECLARE @command VARCHAR(max)\r\nDECLARE @data_item VARCHAR(max)\r\n\r\nDECLARE db_cursor_core_systems CURSOR FOR  \r\nSELECT core_system\r\n      ,core_prod_table\r\n      ,core_uat_table\r\n  FROM core_systems\r\n WHERE UPPER(core_system_status) = 'On'\r\n order by core_system\r\n\r\nOPEN db_cursor_core_systems   \r\n   \r\n    FETCH NEXT FROM db_cursor_core_systems INTO @core_system, @core_prod_table, @core_uat_table\r\n\r\n     WHILE @@FETCH_STATUS = 0   \r\n     BEGIN   \r\n\r\n\t   SET @sql_command = ' INSERT INTO [dbo].[results] (core_system, compid, core_key) '\r\n\t   SET @sql_command = @sql_command + ' SELECT '\r\n\t   SET @sql_command = @sql_command + ' ' + char(39) + @Core_system + char(39) + ' ,'\r\n\r\n\t   DECLARE db_cursor CURSOR FOR  \r\n\t   SELECT ops.command, rules.data_item\r\n\t     FROM comparison_rules rules\r\n        inner join operators ops on ops.operator = rules.operator\r\n        WHERE ops.command <> ''\r\n          and rules.core_system = @core_system\r\n        order by rules.data_order, rules.data_item\r\n\r\n         OPEN db_cursor   \r\n   \r\n           FETCH NEXT FROM db_cursor INTO @command, @data_item\r\n\r\n             WHILE @@FETCH_STATUS = 0   \r\n             BEGIN   \r\n               SET @sql_command = @sql_command + replace(@command,'column_name',@data_item)\r\n               FETCH NEXT FROM db_cursor INTO @command, @data_item\r\n             END   \r\n\r\n        CLOSE db_cursor   \r\n        DEALLOCATE db_cursor\r\n\r\n        SET @sql_command = @sql_command + ' AS COMPID'\r\n        SET @sql_command = @sql_command + ' ,base.Core_Key'\r\n        SET @sql_command = @sql_command + ' FROM     ' + @core_prod_table + ' base'\r\n        SET @sql_command = @sql_command + ' INNER JOIN ' + @core_uat_table + ' cand'\r\n        SET @sql_command = @sql_command + '    ON CAND.Core_System = BASE.Core_System'\r\n        SET @sql_command = @sql_command + '   AND CAND.Core_Key = BASE.Core_Key'\r\n\r\ninsert into logging\r\n(process, core_system, log_details)\r\nvalues ('Comparison Engine', @core_system, 'Started...')\r\ninsert into logging\r\n(process, core_system, log_details)\r\nvalues ('Comparison Engine', @core_system, @sql_command)\r\n\r\n        --SELECT @sql_command \r\n\t\tEXEC (@sql_command )   \r\n   \r\n   insert into logging\r\n(process, core_system, log_details)\r\nvalues ('Comparison Engine', @core_system, '...Ended')\r\n   \r\n   FETCH NEXT FROM db_cursor_core_systems INTO @core_system, @core_prod_table, @core_uat_table\r\n   END   \r\n   \r\nCLOSE db_cursor_core_systems   \r\nDEALLOCATE db_cursor_core_systems\r\n\r\n\r\n-- -------------------------------\r\n-- V0.3 - Classification Naming Standard\r\n-- -------------------------------\r\n\r\n--\r\n-- Copy new classifications into the classifications table\r\n--\r\nINSERT INTO classifications (core_system, compid) \r\n      (SELECT tbl_res.core_system, tbl_res.compid \r\n         FROM results tbl_res \r\n        WHERE not exists (SELECT 1 FROM classifications tbl_class WHERE tbl_class.compid = tbl_res.compid)\r\n        GROUP BY tbl_res.core_system, tbl_res.compid)\r\n\r\n--\r\n-- Name any classifications that have not already been\r\n--\r\nUPDATE classifications\r\n   SET classifications.name = (SELECT \r\n                                      core_system +\r\n                                      ':' + CAST(MAX(ID) as VARCHAR(max)) AS name                                      \r\n                                      \r\n--                                      CONVERT(VARCHAR(10),GETDATE(),112) +\r\n--                                      ':' + core_system +\r\n--                                      ':' + CAST(RIGHT('0000000000' + CAST(MAX(ID) as VARCHAR(10)), 10) AS VARCHAR(20)) AS name\r\n                                      \r\n                                 FROM classifications tbl_class2\r\n                                WHERE CONVERT(date, Date_Time) = CONVERT(date, getdate())\r\n                                  AND tbl_class2.name is null\r\n                                  AND tbl_class2.id = classifications.id\r\n                                GROUP BY compid, core_system)\r\n \r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\ninsert into logging\r\n(process, core_system, log_details)\r\nvalues ('Comparison Engine', '', 'Ended')","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":null},{"name":"procANumberOfSystems","procedure":"-- -----------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- -----------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - Number of System\r\n--\r\n-- Purpose\tRetrieve the number of systems\r\n--\r\n-- Version\tV0.2 - System must be active - include core_system_status in the seletion clause\r\n--\t\t\tV0.1 - Initial draft\r\n--\r\n-- -----------------------------------------------------------------------------------------------------\r\nDECLARE @sql_command VARCHAR(MAX)\r\nSET @sql_command = ''\r\n\r\nSET @sql_command = ' SELECT COUNT(*) '\r\nSET @sql_command = @sql_command + ' FROM core_systems '\r\nSET @sql_command = @sql_command + ' WHERE UPPER(Core_System_Status) = ''ON'' '\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":null},{"name":"GraphAUncatGroupsViaSystem","procedure":"-- -----------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- -----------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - Graph details for uncategorised groups by system\r\n--\r\n-- Purpose\tGraph details for uncategorised groups by system\r\n--\r\n-- Version  V0.1 - Initial draft\r\n--\r\n-- -----------------------------------------------------------------------------------------------------\r\n\r\nDECLARE @sql_command VARCHAR(MAX)\r\nSET @sql_command = ''\r\n\r\nSET @sql_command = ' select core_system, count(*) as ''Uncategorised Groups'' '\r\nSET @sql_command = @sql_command + ' from classifications tbl_class '\r\nSET @sql_command = @sql_command + ' WHERE tbl_class.compid <> REPLICATE(''0'',len(tbl_class.compid))'\r\nSET @sql_command = @sql_command + '   AND NOT EXISTS\t(SELECT 1 FROM categorisation_rules tbl_rules WHERE tbl_rules.classification_name = tbl_class.name) '\r\nSET @sql_command = @sql_command + '   AND EXISTS\t(SELECT 1 FROM core_systems tbl_core WHERE tbl_core.core_system = tbl_class.core_system AND tbl_core.core_system_status = ''On'') '\r\nSET @sql_command = @sql_command + ' GROUP BY core_system '\r\n\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":"rover2GraphAUncatGroupsViaSystemrtnType"},{"name":"procFUncategorisedGroups","procedure":"-- --------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- --------------------------------------------------------------------------------------------------\r\n--\r\n-- Title\tROVER - Retrieve count of Uncategorised Groups for all Active Systems\r\n--\r\n-- Purpose\tRetrieve count of Uncategorised Groups for all Active Systems\r\n--\r\n-- Version  V0.1 - Initial draft\r\n--\r\n-- --------------------------------------------------------------------------------------------------\r\nDECLARE @sql_command VARCHAR(MAX)\r\nSET @sql_command = ''\r\n\r\n\r\nSET @sql_command = ' SELECT count(*) '\r\nSET @sql_command = @sql_command + '  FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + ' WHERE tbl_class.compid <> REPLICATE(''0'',len(tbl_class.compid))'\r\nSET @sql_command = @sql_command + '   AND NOT EXISTS\t(SELECT 1 FROM categorisation_rules tbl_rules WHERE tbl_rules.classification_name = tbl_class.name) '\r\nSET @sql_command = @sql_command + '   AND EXISTS\t\t(SELECT 1 FROM core_systems tbl_core WHERE tbl_core.core_system = tbl_class.core_system AND tbl_core.core_system_status = ''On'')'\r\n\r\nexec (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":null},{"name":"ProcBGroupReport","procedure":"-- --------------------------------------------------------------------------------------------------\r\nDECLARE @classification_name varchar(max)\r\nSET @classification_name = :p1\t\t\t\t\t\t\t\t-- UI Parameter passed to procedure\r\n-- --------------------------------------------------------------------------------------------------\r\n\r\ndeclare @report varchar(max)\r\ndeclare @compid varchar(max)\r\ndeclare @core_system varchar(max)\r\n\r\nDECLARE @diff_list nVARCHAR(MAX)\r\nSET @diff_list = dbo.diff_list(@classification_name)\r\nDECLARE @diff_cols VARCHAR(max) \r\nEXEC sp_executesql @diff_list, N'@diff_colsOUT varchar(max) OUTPUT', @diff_colsOUT = @diff_cols OUTPUT\r\n\r\n\r\nselect @compid = compid from classifications tbl_class where tbl_class.name = @classification_name\r\nselect @core_system = core_system from classifications tbl_class where tbl_class.name = @classification_name\r\n\r\nDECLARE @sample_trade VARCHAR(MAX)\r\nselect @sample_trade = core_key from results tbl_resl where compid = @compid\r\n\r\n\r\nset @report =\t\t\t(select ' Report Date : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(select cast(getdate() as varchar(max)))\r\n\t\t\t\t\t\t+ '[crlf]'\r\n\t\t\t\t\t\t\r\nset @report = @report + '[crlf]'\r\n\r\nset @report = @report + (select ' Rover Group : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(select name from classifications tbl_class where name = @classification_name)    \r\n\t\t\t\t\t\t+ '[crlf]'\r\n\r\nset @report = @report + '[crlf]'\r\n\t\t\t\t\t\t\r\nset @report = @report + (select ' List of Differences : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(@diff_cols   )\r\n\t\t\t\t\t\t+ '[crlf]'\t\t\t\t\t\t\r\n\r\nset @report = @report + '[crlf]'\r\n\r\nset @report = @report + (select ' First Appeared : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(select cast(min(date_time) as varchar(max)) from results tbl_resl where tbl_resl.compid = @compid and tbl_resl.core_system = @core_system)    \r\n\t\t\t\t\t\t+ '[crlf]'\t\t\t\t\t\t\r\n\t\t\t\t\t\t\r\nset @report = @report + (select ' Last  Appeared : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(select cast(max(date_time) as varchar(max)) from results tbl_resl where tbl_resl.compid = @compid and tbl_resl.core_system = @core_system)    \r\n\t\t\t\t\t\t+ '[crlf]'\t\t\t\t\t\t\r\n\r\nset @report = @report + '[crlf]'\r\n\r\nset @report = @report + (select ' Number of messages affected : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(select cast(count(*) as varchar(max)) from results tbl_resl where compid = @compid)\r\n\t\t\t\t\t\t+ '[crlf]'\t\t\t\t\t\t\r\n\r\nset @report = @report + '[crlf]'\r\n\r\nset @report = @report + (select ' Sample trade : ')\r\n\t\t\t\t\t\t+\r\n\t\t\t\t\t\t(@sample_trade)\r\n\t\t\t\t\t\t+ '[crlf]'\t\t\t\t\t\t\r\n\r\nset @report = @report + '[crlf]'\r\n\r\n\r\n--SET @report = REPLACE(@report,'[crlf]',CHAR(13)+CHAR(10))\r\nSET @report = REPLACE(@report,'[crlf]','<br>')\r\nselect @report","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":"rover2ProcBGroupReportrtnType"},{"name":"procBuildMeARuleClassAndCat","procedure":"DECLARE @classification_name VARCHAR(MAX)\r\nSET @classification_name = :p1\r\n\r\nDECLARE @sql_command VARCHAR(MAX)\r\n\r\nSET @sql_command = ''\r\n\r\nSET @sql_command = ' INSERT INTO categorisation_rules (core_system, classification_name, category, who, comment) '\r\nSET @sql_command = @sql_command + ' (SELECT tbl_class.core_system, tbl_class.name, ''To Be Determined'', ''admin'', ''Rule created'' ' \r\nSET @sql_command = @sql_command + ' FROM classifications tbl_class '\r\nSET @sql_command = @sql_command + '  WHERE tbl_class.name = ''' + @classification_name + ''''\r\nSET @sql_command = @sql_command + '    AND not exists (Select 1 from categorisation_rules tbl_cat where tbl_cat.classification_name = ''' + @classification_name + '''))'\r\n--\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procBClassificationColumnListForThisSystem","procedure":"-- --------------------------------------------------------------------------------------------------\r\n-- (C) Red Hound Limited 2015\r\n-- --------------------------------------------------------------------------------------------------\r\n--\r\n-- Title    ROVER - Retrieve list of comparison data items that differ for this classifiation\r\n--\r\n-- Purpose  Retrieve list of comparison data items that differ for this classifiation \r\n--\r\n-- Version  V0.1 - Initial draft\r\n--\r\n-- --------------------------------------------------------------------------------------------------\r\n\r\n-- --------------------------------------------------------------------------------------------------\r\nDECLARE @classification_name VARCHAR(MAX)\r\nSET @classification_name = :p1\r\nDECLARE @sql_command VARCHAR(MAX)\r\nDECLARE @delim VARCHAR(MAX)\r\nDECLARE @compid VARCHAR(MAX)\r\nDECLARE @core_system VARCHAR(MAX)\r\n\r\nDECLARE @index INT\r\n\r\nSET @index = 1\r\nSET @sql_command = ''\r\nSET @delim = ''\r\n\r\nSELECT @compid = compid FROM classifications WHERE name = @classification_name\r\nSELECT @core_system = core_system FROM classifications WHERE name = @classification_name\r\n\r\nSET @sql_command = ' Select data_item from comparison_rules where data_order in ('\r\n\r\nWHILE @index <= LEN(@compid)\r\nBEGIN\r\n  \r\n  IF SUBSTRING(@compid,@index,1) = '1'\r\n  BEGIN\r\n  \r\n    SET @sql_command = @sql_command + @delim + '''' + rtrim(CAST(@index AS CHAR(15))) + ''''\r\n    SET @delim = ', '\r\n  \r\n  END\r\n\r\n  SET @index = @index + 1\r\nEND\r\n\r\nSET @sql_command = @sql_command + ')'\r\nSET @sql_command = @sql_command + ' and core_system = ''' + @core_system + ''''\r\n\r\n\r\n\r\nEXEC (@sql_command)","comment":"","description":null,"returnsSingleResult":false,"procedureParams":[{"paramName":"p1","procedureParamType":"IN","valueType":"java.lang.String","list":false}],"outputType":null},{"name":"procNumberOfRecordsInProd","procedure":"DECLARE @core_prod_table VARCHAR(max)\nDECLARE @core_uat_table VARCHAR(max)\nDECLARE @sql_command VARCHAR(max)\nDECLARE @sql_delim VARCHAR(max)\n\nDECLARE db_cursor_core_systems CURSOR FOR  \nSELECT core_prod_table\n  FROM core_systems\n WHERE UPPER(core_system_status) = 'On'\n order by core_system\n\nSET @sql_command = ''\nSET @sql_delim = ''\n\nOPEN db_cursor_core_systems   \n   \n    FETCH NEXT FROM db_cursor_core_systems INTO @core_prod_table\n\n    SET @sql_command = @sql_command + ' Select '\n\n     WHILE @@FETCH_STATUS = 0   \n     BEGIN   \n     \n       SET @sql_command = @sql_command + @sql_delim\n              \n       SET @sql_command = @sql_command + '(Select COUNT(*) from ' + @core_prod_table + ')'\n          \n  \t   SET @sql_delim = ' + '\n\n     FETCH NEXT FROM db_cursor_core_systems INTO @core_prod_table\n   end\n   \nCLOSE db_cursor_core_systems   \nDEALLOCATE db_cursor_core_systems\n     \nexec (@sql_command)","comment":"Describes number of records across all Production systems","description":null,"returnsSingleResult":false,"procedureParams":[],"outputType":"rover2procNumberOfRecordsInProdrtnType"}]}